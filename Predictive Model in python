{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e096a387",
   "metadata": {},
   "source": [
    "# AN INVESTIGATION INTO FITNESS DATA FOR TRIVIOSO'S NEW FITNESS TRACKING DEVICE\n",
    "\n",
    "\n",
    " \n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ffc99559",
   "metadata": {},
   "source": [
    "# INTRODUCTION:\n",
    "\n",
    "We were given a dataset from Trivisio, which comprises nine (9) participants who wore 3 IMUs(3 sensors to measure acceleration, angular rate, and magnetic field): this is the new Colibri Wireless unit, for which Trivision hopes to create a superior market. Also, the participant wore a heart-rate monitor sensor that measures temperature and orientation. This sensor monitored and documented information on the twelve(12) different physical activities and six(6) additional activities performed by the nine (9)subjects.\n",
    "\n",
    "The objective of Trivison company is to create a superior market for its new Colibri Wireless unit product than its three (3) main competitor products: OptoTrak 3020 by Optotrak Certus, MTw Awinda by Xsens, T40s by Vicon, and Wireless InertiaCube3 by InterSense.\n",
    "\n",
    "\n",
    "- Problem Statement\n",
    "As the data scientist at Trivisio, the report will focus on relevant metrics in the Physical Activity Monitoring dataset recorded with the tracking devices to develop a predictive model focusing on different physical activities conducted by the nine participants and the physiological metric output. \n",
    "\n",
    "- Hypothesis\n",
    "The predictive hypothesis will be centred around understanding the factors influencing or identifying the intensity of activities for fitness. We aim to answer the question: Can the intensity of physical activity be predictable using inertial sensor data and specific physiological markers combined? To validate the hypothesis question that will be formulated later on, the model will predict the linear relationship/clustering of physiological metrics such as heart rate, METs, temperature, etc., with respect to the individual activity ID.\n",
    "\n",
    "\n",
    "This report should provide explicit knowledge and valuable recommendations about the individual's level of activity and how accurately different physiological metrics in the dataset measure the impacts and intensity of various activities carried out by each subject. Trivision will, therefore, be able to use this knowledge and advice to its advantage over competitors in the device market. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "f29fd8eb",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Importing all relevant package \n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.ticker as ticker\n",
    "import seaborn as sns\n",
    "from scipy import stats\n",
    "from sklearn import linear_model\n",
    "from sklearn import metrics\n",
    "from sklearn.model_selection import train_test_split\n",
    "import itertools\n",
    "import statsmodels.api as sm\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.feature_selection import SequentialFeatureSelector\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.metrics import mean_squared_error"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31403795",
   "metadata": {},
   "source": [
    "# Loading Data\n",
    "\n",
    "The dataset for the nine participants is provided separately, which requires putting it together into a data frame and proper format for analysis. I loaded and concatenated the data set from the 9 participant files. Based on an overview of the data, there are 2,872,533 data entries.\n",
    "\n",
    "- Data Structure; consist of 2,872,533 rows and 55 columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "9cceb104",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Subject_ID</th>\n",
       "      <th>timestamp (seconds)</th>\n",
       "      <th>activity ID</th>\n",
       "      <th>heart rate (bpm)</th>\n",
       "      <th>hand - temperature</th>\n",
       "      <th>hand - 3D-acceleration scale: ±16g, resolution: 13-bit -1</th>\n",
       "      <th>hand - 3D-acceleration scale: ±16g, resolution: 13-bit -2</th>\n",
       "      <th>hand - 3D-acceleration scale: ±16g, resolution: 13-bit -3</th>\n",
       "      <th>hand - 3D-acceleration scale: ±6g, resolution: 13-bit* -1</th>\n",
       "      <th>hand - 3D-acceleration scale: ±6g, resolution: 13-bit* -2</th>\n",
       "      <th>...</th>\n",
       "      <th>ankle - 3D-gyroscope -1</th>\n",
       "      <th>ankle - 3D-gyroscope -2</th>\n",
       "      <th>ankle - 3D-gyroscope -3</th>\n",
       "      <th>ankle - 3D-magnetometer -1</th>\n",
       "      <th>ankle - 3D-magnetometer -2</th>\n",
       "      <th>ankle - 3D-magnetometer -3</th>\n",
       "      <th>ankle - orientation (invalid in this data collection) -1</th>\n",
       "      <th>ankle - orientation (invalid in this data collection) -2</th>\n",
       "      <th>ankle - orientation (invalid in this data collection) -3</th>\n",
       "      <th>ankle - orientation (invalid in this data collection) -4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>101</td>\n",
       "      <td>8.38</td>\n",
       "      <td>0</td>\n",
       "      <td>104.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>2.37223</td>\n",
       "      <td>8.60074</td>\n",
       "      <td>3.51048</td>\n",
       "      <td>2.43954</td>\n",
       "      <td>8.76165</td>\n",
       "      <td>...</td>\n",
       "      <td>0.008300</td>\n",
       "      <td>0.009250</td>\n",
       "      <td>-0.017580</td>\n",
       "      <td>-61.1888</td>\n",
       "      <td>-38.9599</td>\n",
       "      <td>-58.1438</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>101</td>\n",
       "      <td>8.39</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30.0</td>\n",
       "      <td>2.18837</td>\n",
       "      <td>8.56560</td>\n",
       "      <td>3.66179</td>\n",
       "      <td>2.39494</td>\n",
       "      <td>8.55081</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.006577</td>\n",
       "      <td>-0.004638</td>\n",
       "      <td>0.000368</td>\n",
       "      <td>-59.8479</td>\n",
       "      <td>-38.8919</td>\n",
       "      <td>-58.5253</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>101</td>\n",
       "      <td>8.40</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30.0</td>\n",
       "      <td>2.37357</td>\n",
       "      <td>8.60107</td>\n",
       "      <td>3.54898</td>\n",
       "      <td>2.30514</td>\n",
       "      <td>8.53644</td>\n",
       "      <td>...</td>\n",
       "      <td>0.003014</td>\n",
       "      <td>0.000148</td>\n",
       "      <td>0.022495</td>\n",
       "      <td>-60.7361</td>\n",
       "      <td>-39.4138</td>\n",
       "      <td>-58.3999</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>101</td>\n",
       "      <td>8.41</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30.0</td>\n",
       "      <td>2.07473</td>\n",
       "      <td>8.52853</td>\n",
       "      <td>3.66021</td>\n",
       "      <td>2.33528</td>\n",
       "      <td>8.53622</td>\n",
       "      <td>...</td>\n",
       "      <td>0.003175</td>\n",
       "      <td>-0.020301</td>\n",
       "      <td>0.011275</td>\n",
       "      <td>-60.4091</td>\n",
       "      <td>-38.7635</td>\n",
       "      <td>-58.3956</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>101</td>\n",
       "      <td>8.42</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30.0</td>\n",
       "      <td>2.22936</td>\n",
       "      <td>8.83122</td>\n",
       "      <td>3.70000</td>\n",
       "      <td>2.23055</td>\n",
       "      <td>8.59741</td>\n",
       "      <td>...</td>\n",
       "      <td>0.012698</td>\n",
       "      <td>-0.014303</td>\n",
       "      <td>-0.002823</td>\n",
       "      <td>-61.5199</td>\n",
       "      <td>-39.3879</td>\n",
       "      <td>-58.2694</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 55 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  Subject_ID  timestamp (seconds) activity ID  heart rate (bpm)  \\\n",
       "0        101                 8.38           0             104.0   \n",
       "1        101                 8.39           0               NaN   \n",
       "2        101                 8.40           0               NaN   \n",
       "3        101                 8.41           0               NaN   \n",
       "4        101                 8.42           0               NaN   \n",
       "\n",
       "   hand - temperature  \\\n",
       "0                30.0   \n",
       "1                30.0   \n",
       "2                30.0   \n",
       "3                30.0   \n",
       "4                30.0   \n",
       "\n",
       "   hand - 3D-acceleration scale: ±16g, resolution: 13-bit -1  \\\n",
       "0                                            2.37223           \n",
       "1                                            2.18837           \n",
       "2                                            2.37357           \n",
       "3                                            2.07473           \n",
       "4                                            2.22936           \n",
       "\n",
       "   hand - 3D-acceleration scale: ±16g, resolution: 13-bit -2  \\\n",
       "0                                            8.60074           \n",
       "1                                            8.56560           \n",
       "2                                            8.60107           \n",
       "3                                            8.52853           \n",
       "4                                            8.83122           \n",
       "\n",
       "   hand - 3D-acceleration scale: ±16g, resolution: 13-bit -3  \\\n",
       "0                                            3.51048           \n",
       "1                                            3.66179           \n",
       "2                                            3.54898           \n",
       "3                                            3.66021           \n",
       "4                                            3.70000           \n",
       "\n",
       "   hand - 3D-acceleration scale: ±6g, resolution: 13-bit* -1  \\\n",
       "0                                            2.43954           \n",
       "1                                            2.39494           \n",
       "2                                            2.30514           \n",
       "3                                            2.33528           \n",
       "4                                            2.23055           \n",
       "\n",
       "   hand - 3D-acceleration scale: ±6g, resolution: 13-bit* -2  ...  \\\n",
       "0                                            8.76165          ...   \n",
       "1                                            8.55081          ...   \n",
       "2                                            8.53644          ...   \n",
       "3                                            8.53622          ...   \n",
       "4                                            8.59741          ...   \n",
       "\n",
       "   ankle - 3D-gyroscope -1  ankle - 3D-gyroscope -2  ankle - 3D-gyroscope -3  \\\n",
       "0                 0.008300                 0.009250                -0.017580   \n",
       "1                -0.006577                -0.004638                 0.000368   \n",
       "2                 0.003014                 0.000148                 0.022495   \n",
       "3                 0.003175                -0.020301                 0.011275   \n",
       "4                 0.012698                -0.014303                -0.002823   \n",
       "\n",
       "   ankle - 3D-magnetometer -1  ankle - 3D-magnetometer -2  \\\n",
       "0                    -61.1888                    -38.9599   \n",
       "1                    -59.8479                    -38.8919   \n",
       "2                    -60.7361                    -39.4138   \n",
       "3                    -60.4091                    -38.7635   \n",
       "4                    -61.5199                    -39.3879   \n",
       "\n",
       "   ankle - 3D-magnetometer -3  \\\n",
       "0                    -58.1438   \n",
       "1                    -58.5253   \n",
       "2                    -58.3999   \n",
       "3                    -58.3956   \n",
       "4                    -58.2694   \n",
       "\n",
       "   ankle - orientation (invalid in this data collection) -1  \\\n",
       "0                                                1.0          \n",
       "1                                                1.0          \n",
       "2                                                1.0          \n",
       "3                                                1.0          \n",
       "4                                                1.0          \n",
       "\n",
       "   ankle - orientation (invalid in this data collection) -2  \\\n",
       "0                                                0.0          \n",
       "1                                                0.0          \n",
       "2                                                0.0          \n",
       "3                                                0.0          \n",
       "4                                                0.0          \n",
       "\n",
       "   ankle - orientation (invalid in this data collection) -3  \\\n",
       "0                                                0.0          \n",
       "1                                                0.0          \n",
       "2                                                0.0          \n",
       "3                                                0.0          \n",
       "4                                                0.0          \n",
       "\n",
       "   ankle - orientation (invalid in this data collection) -4  \n",
       "0                                                0.0         \n",
       "1                                                0.0         \n",
       "2                                                0.0         \n",
       "3                                                0.0         \n",
       "4                                                0.0         \n",
       "\n",
       "[5 rows x 55 columns]"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# created headers and empty dataframe to store the dataset\n",
    "df_h = headers=['timestamp (seconds)','activity ID', 'heart rate (bpm)','hand - temperature', 'hand - 3D-acceleration scale: ±16g, resolution: 13-bit -1',  'hand - 3D-acceleration scale: ±16g, resolution: 13-bit -2','hand - 3D-acceleration scale: ±16g, resolution: 13-bit -3',  'hand - 3D-acceleration scale: ±6g, resolution: 13-bit* -1','hand - 3D-acceleration scale: ±6g, resolution: 13-bit* -2',  'hand - 3D-acceleration scale: ±6g, resolution: 13-bit* -3','hand - 3D-gyroscope -1','hand - 3D-gyroscope -2','hand - 3D-gyroscope -3',  'hand - 3D-magnetometer -1','hand - 3D-magnetometer -2','hand - 3D-magnetometer -3','hand - orientation (invalid in this data collection) -1',  'hand - orientation (invalid in this data collection) -2','hand - orientation (invalid in this data collection) -3',  'hand - orientation (invalid in this data collection) -4','chest - temperature', 'chest - 3D-acceleration scale: ±16g, resolution: 13-bit -1',  'chest - 3D-acceleration scale: ±16g, resolution: 13-bit -2','chest - 3D-acceleration scale: ±16g, resolution: 13-bit -3',  'chest - 3D-acceleration scale: ±6g, resolution: 13-bit* -1','chest - 3D-acceleration scale: ±6g, resolution: 13-bit* -2',  'chest - 3D-acceleration scale: ±6g, resolution: 13-bit* -3','chest - 3D-gyroscope -1','chest - 3D-gyroscope -2','chest - 3D-gyroscope -3', 'chest - 3D-magnetometer -1','chest - 3D-magnetometer -2','chest - 3D-magnetometer -3','chest - orientation (invalid in this data collection) -1',  'chest - orientation (invalid in this data collection) -2','chest - orientation (invalid in this data collection) -3',  'chest - orientation (invalid in this data collection) -4','ankle - temperature' ,'ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -1',  'ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -2','ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -3',  'ankle - 3D-acceleration scale: ±6g, resolution: 13-bit* -1','ankle - 3D-acceleration scale: ±6g, resolution: 13-bit* -2',  'ankle - 3D-acceleration scale: ±6g, resolution: 13-bit* -3','ankle - 3D-gyroscope -1','ankle - 3D-gyroscope -2','ankle - 3D-gyroscope -3',  'ankle - 3D-magnetometer -1','ankle - 3D-magnetometer -2','ankle - 3D-magnetometer -3','ankle - orientation (invalid in this data collection) -1',  'ankle - orientation (invalid in this data collection) -2','ankle - orientation (invalid in this data collection) -3',  'ankle - orientation (invalid in this data collection) -4']\n",
    "df_h = pd.DataFrame(columns=headers)\n",
    "df_h.insert(loc=0,column='Subject_ID',value=\"\")\n",
    "\n",
    "#created empty dataframe to store all the nine(9) Subjects files\n",
    "df_s = []\n",
    "\n",
    "#Loop to Read and append all data for each Subject\n",
    "\n",
    "for i in range(1, 10):\n",
    "    filename = f\"subject1{i:0>2d}.dat\"\n",
    "    df_all_subj = pd.read_csv(filename, names=headers, delimiter=\" \")\n",
    "    df_all_subj.insert(loc=0, column='Subject_ID', value=f\"1{i:0>2d}\")\n",
    "    df_s.append(df_all_subj)\n",
    "    \n",
    "#Concatenate All DataFrames (df_s and df_h)\n",
    "df_all_data = pd.concat([df_h] + df_s, ignore_index=True)\n",
    "\n",
    "# Save the concatenated DataFrame to a CSV file\n",
    "df_all_data.to_csv('df_all_data.csv', index=False)\n",
    "\n",
    "#print first 5 columns of the dataset\n",
    "df_all_data.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "e1b2e12c",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2872533 entries, 0 to 2872532\n",
      "Data columns (total 55 columns):\n",
      " #   Column                                                      Dtype  \n",
      "---  ------                                                      -----  \n",
      " 0   Subject_ID                                                  object \n",
      " 1   timestamp (seconds)                                         float64\n",
      " 2   activity ID                                                 object \n",
      " 3   heart rate (bpm)                                            float64\n",
      " 4   hand - temperature                                          float64\n",
      " 5   hand - 3D-acceleration scale: ±16g, resolution: 13-bit -1   float64\n",
      " 6   hand - 3D-acceleration scale: ±16g, resolution: 13-bit -2   float64\n",
      " 7   hand - 3D-acceleration scale: ±16g, resolution: 13-bit -3   float64\n",
      " 8   hand - 3D-acceleration scale: ±6g, resolution: 13-bit* -1   float64\n",
      " 9   hand - 3D-acceleration scale: ±6g, resolution: 13-bit* -2   float64\n",
      " 10  hand - 3D-acceleration scale: ±6g, resolution: 13-bit* -3   float64\n",
      " 11  hand - 3D-gyroscope -1                                      float64\n",
      " 12  hand - 3D-gyroscope -2                                      float64\n",
      " 13  hand - 3D-gyroscope -3                                      float64\n",
      " 14  hand - 3D-magnetometer -1                                   float64\n",
      " 15  hand - 3D-magnetometer -2                                   float64\n",
      " 16  hand - 3D-magnetometer -3                                   float64\n",
      " 17  hand - orientation (invalid in this data collection) -1     float64\n",
      " 18  hand - orientation (invalid in this data collection) -2     float64\n",
      " 19  hand - orientation (invalid in this data collection) -3     float64\n",
      " 20  hand - orientation (invalid in this data collection) -4     float64\n",
      " 21  chest - temperature                                         float64\n",
      " 22  chest - 3D-acceleration scale: ±16g, resolution: 13-bit -1  float64\n",
      " 23  chest - 3D-acceleration scale: ±16g, resolution: 13-bit -2  float64\n",
      " 24  chest - 3D-acceleration scale: ±16g, resolution: 13-bit -3  float64\n",
      " 25  chest - 3D-acceleration scale: ±6g, resolution: 13-bit* -1  float64\n",
      " 26  chest - 3D-acceleration scale: ±6g, resolution: 13-bit* -2  float64\n",
      " 27  chest - 3D-acceleration scale: ±6g, resolution: 13-bit* -3  float64\n",
      " 28  chest - 3D-gyroscope -1                                     float64\n",
      " 29  chest - 3D-gyroscope -2                                     float64\n",
      " 30  chest - 3D-gyroscope -3                                     float64\n",
      " 31  chest - 3D-magnetometer -1                                  float64\n",
      " 32  chest - 3D-magnetometer -2                                  float64\n",
      " 33  chest - 3D-magnetometer -3                                  float64\n",
      " 34  chest - orientation (invalid in this data collection) -1    float64\n",
      " 35  chest - orientation (invalid in this data collection) -2    float64\n",
      " 36  chest - orientation (invalid in this data collection) -3    float64\n",
      " 37  chest - orientation (invalid in this data collection) -4    float64\n",
      " 38  ankle - temperature                                         float64\n",
      " 39  ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -1  float64\n",
      " 40  ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -2  float64\n",
      " 41  ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -3  float64\n",
      " 42  ankle - 3D-acceleration scale: ±6g, resolution: 13-bit* -1  float64\n",
      " 43  ankle - 3D-acceleration scale: ±6g, resolution: 13-bit* -2  float64\n",
      " 44  ankle - 3D-acceleration scale: ±6g, resolution: 13-bit* -3  float64\n",
      " 45  ankle - 3D-gyroscope -1                                     float64\n",
      " 46  ankle - 3D-gyroscope -2                                     float64\n",
      " 47  ankle - 3D-gyroscope -3                                     float64\n",
      " 48  ankle - 3D-magnetometer -1                                  float64\n",
      " 49  ankle - 3D-magnetometer -2                                  float64\n",
      " 50  ankle - 3D-magnetometer -3                                  float64\n",
      " 51  ankle - orientation (invalid in this data collection) -1    float64\n",
      " 52  ankle - orientation (invalid in this data collection) -2    float64\n",
      " 53  ankle - orientation (invalid in this data collection) -3    float64\n",
      " 54  ankle - orientation (invalid in this data collection) -4    float64\n",
      "dtypes: float64(53), object(2)\n",
      "memory usage: 1.2+ GB\n"
     ]
    }
   ],
   "source": [
    "#print summary of a DataFrame\n",
    "df_all_data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "90092f55",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>timestamp (seconds)</th>\n",
       "      <th>heart rate (bpm)</th>\n",
       "      <th>hand - temperature</th>\n",
       "      <th>hand - 3D-acceleration scale: ±16g, resolution: 13-bit -1</th>\n",
       "      <th>hand - 3D-acceleration scale: ±16g, resolution: 13-bit -2</th>\n",
       "      <th>hand - 3D-acceleration scale: ±16g, resolution: 13-bit -3</th>\n",
       "      <th>hand - 3D-acceleration scale: ±6g, resolution: 13-bit* -1</th>\n",
       "      <th>hand - 3D-acceleration scale: ±6g, resolution: 13-bit* -2</th>\n",
       "      <th>hand - 3D-acceleration scale: ±6g, resolution: 13-bit* -3</th>\n",
       "      <th>hand - 3D-gyroscope -1</th>\n",
       "      <th>...</th>\n",
       "      <th>ankle - 3D-gyroscope -1</th>\n",
       "      <th>ankle - 3D-gyroscope -2</th>\n",
       "      <th>ankle - 3D-gyroscope -3</th>\n",
       "      <th>ankle - 3D-magnetometer -1</th>\n",
       "      <th>ankle - 3D-magnetometer -2</th>\n",
       "      <th>ankle - 3D-magnetometer -3</th>\n",
       "      <th>ankle - orientation (invalid in this data collection) -1</th>\n",
       "      <th>ankle - orientation (invalid in this data collection) -2</th>\n",
       "      <th>ankle - orientation (invalid in this data collection) -3</th>\n",
       "      <th>ankle - orientation (invalid in this data collection) -4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2.872533e+06</td>\n",
       "      <td>262268.000000</td>\n",
       "      <td>2.859392e+06</td>\n",
       "      <td>2.859392e+06</td>\n",
       "      <td>2.859392e+06</td>\n",
       "      <td>2.859392e+06</td>\n",
       "      <td>2.859392e+06</td>\n",
       "      <td>2.859392e+06</td>\n",
       "      <td>2.859392e+06</td>\n",
       "      <td>2.859392e+06</td>\n",
       "      <td>...</td>\n",
       "      <td>2.860784e+06</td>\n",
       "      <td>2.860784e+06</td>\n",
       "      <td>2.860784e+06</td>\n",
       "      <td>2.860784e+06</td>\n",
       "      <td>2.860784e+06</td>\n",
       "      <td>2.860784e+06</td>\n",
       "      <td>2.860784e+06</td>\n",
       "      <td>2.860784e+06</td>\n",
       "      <td>2.860784e+06</td>\n",
       "      <td>2.860784e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1.834354e+03</td>\n",
       "      <td>109.872508</td>\n",
       "      <td>3.265258e+01</td>\n",
       "      <td>-4.960786e+00</td>\n",
       "      <td>3.587758e+00</td>\n",
       "      <td>3.168417e+00</td>\n",
       "      <td>-4.889420e+00</td>\n",
       "      <td>3.584267e+00</td>\n",
       "      <td>3.349479e+00</td>\n",
       "      <td>-3.704744e-03</td>\n",
       "      <td>...</td>\n",
       "      <td>8.635143e-03</td>\n",
       "      <td>-3.450122e-02</td>\n",
       "      <td>7.752030e-03</td>\n",
       "      <td>-3.272102e+01</td>\n",
       "      <td>1.593304e+00</td>\n",
       "      <td>1.689044e+01</td>\n",
       "      <td>3.986417e-01</td>\n",
       "      <td>2.154835e-02</td>\n",
       "      <td>3.091533e-01</td>\n",
       "      <td>-1.878725e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.105689e+03</td>\n",
       "      <td>25.870036</td>\n",
       "      <td>1.844274e+00</td>\n",
       "      <td>5.985029e+00</td>\n",
       "      <td>6.277838e+00</td>\n",
       "      <td>3.843923e+00</td>\n",
       "      <td>5.992726e+00</td>\n",
       "      <td>6.055750e+00</td>\n",
       "      <td>3.840650e+00</td>\n",
       "      <td>1.297393e+00</td>\n",
       "      <td>...</td>\n",
       "      <td>1.073556e+00</td>\n",
       "      <td>5.966026e-01</td>\n",
       "      <td>1.842552e+00</td>\n",
       "      <td>1.887860e+01</td>\n",
       "      <td>2.161181e+01</td>\n",
       "      <td>2.030858e+01</td>\n",
       "      <td>3.034561e-01</td>\n",
       "      <td>5.691302e-01</td>\n",
       "      <td>3.237875e-01</td>\n",
       "      <td>4.731373e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>5.640000e+00</td>\n",
       "      <td>57.000000</td>\n",
       "      <td>2.475000e+01</td>\n",
       "      <td>-1.453670e+02</td>\n",
       "      <td>-1.043010e+02</td>\n",
       "      <td>-1.014520e+02</td>\n",
       "      <td>-6.148950e+01</td>\n",
       "      <td>-6.186800e+01</td>\n",
       "      <td>-6.193470e+01</td>\n",
       "      <td>-2.813540e+01</td>\n",
       "      <td>...</td>\n",
       "      <td>-2.399500e+01</td>\n",
       "      <td>-1.812690e+01</td>\n",
       "      <td>-1.401960e+01</td>\n",
       "      <td>-1.728650e+02</td>\n",
       "      <td>-1.379080e+02</td>\n",
       "      <td>-1.092890e+02</td>\n",
       "      <td>-2.536280e-01</td>\n",
       "      <td>-9.568760e-01</td>\n",
       "      <td>-8.768380e-01</td>\n",
       "      <td>-9.972810e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>8.931600e+02</td>\n",
       "      <td>90.000000</td>\n",
       "      <td>3.143750e+01</td>\n",
       "      <td>-9.028420e+00</td>\n",
       "      <td>1.290268e+00</td>\n",
       "      <td>9.685818e-01</td>\n",
       "      <td>-8.933270e+00</td>\n",
       "      <td>1.284680e+00</td>\n",
       "      <td>1.164040e+00</td>\n",
       "      <td>-3.477165e-01</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.526250e-01</td>\n",
       "      <td>-8.267093e-02</td>\n",
       "      <td>-3.084595e-01</td>\n",
       "      <td>-4.289480e+01</td>\n",
       "      <td>-1.148540e+01</td>\n",
       "      <td>3.289348e+00</td>\n",
       "      <td>1.563440e-01</td>\n",
       "      <td>-5.839910e-01</td>\n",
       "      <td>1.087023e-02</td>\n",
       "      <td>-5.047580e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1.790830e+03</td>\n",
       "      <td>108.000000</td>\n",
       "      <td>3.312500e+01</td>\n",
       "      <td>-5.788145e+00</td>\n",
       "      <td>3.570830e+00</td>\n",
       "      <td>2.958415e+00</td>\n",
       "      <td>-5.737615e+00</td>\n",
       "      <td>3.613430e+00</td>\n",
       "      <td>3.132855e+00</td>\n",
       "      <td>-6.160635e-03</td>\n",
       "      <td>...</td>\n",
       "      <td>4.251595e-03</td>\n",
       "      <td>-4.249850e-03</td>\n",
       "      <td>-2.216015e-03</td>\n",
       "      <td>-3.390020e+01</td>\n",
       "      <td>1.362615e+00</td>\n",
       "      <td>1.809105e+01</td>\n",
       "      <td>3.197555e-01</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>3.043820e-01</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2.710570e+03</td>\n",
       "      <td>125.000000</td>\n",
       "      <td>3.400000e+01</td>\n",
       "      <td>-7.829420e-01</td>\n",
       "      <td>6.602720e+00</td>\n",
       "      <td>6.002930e+00</td>\n",
       "      <td>-7.249920e-01</td>\n",
       "      <td>6.601960e+00</td>\n",
       "      <td>6.257612e+00</td>\n",
       "      <td>3.028320e-01</td>\n",
       "      <td>...</td>\n",
       "      <td>9.464213e-02</td>\n",
       "      <td>8.296868e-02</td>\n",
       "      <td>6.343258e-02</td>\n",
       "      <td>-1.905920e+01</td>\n",
       "      <td>1.733090e+01</td>\n",
       "      <td>3.087820e+01</td>\n",
       "      <td>5.794420e-01</td>\n",
       "      <td>6.279450e-01</td>\n",
       "      <td>6.020032e-01</td>\n",
       "      <td>4.634432e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>4.475630e+03</td>\n",
       "      <td>202.000000</td>\n",
       "      <td>3.550000e+01</td>\n",
       "      <td>6.285960e+01</td>\n",
       "      <td>1.556990e+02</td>\n",
       "      <td>1.577600e+02</td>\n",
       "      <td>5.282140e+01</td>\n",
       "      <td>6.225980e+01</td>\n",
       "      <td>6.194460e+01</td>\n",
       "      <td>2.641580e+01</td>\n",
       "      <td>...</td>\n",
       "      <td>1.742040e+01</td>\n",
       "      <td>1.358820e+01</td>\n",
       "      <td>1.652880e+01</td>\n",
       "      <td>9.752550e+01</td>\n",
       "      <td>1.233060e+02</td>\n",
       "      <td>1.469000e+02</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>9.595380e-01</td>\n",
       "      <td>9.923540e-01</td>\n",
       "      <td>9.961050e-01</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows × 53 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       timestamp (seconds)  heart rate (bpm)  hand - temperature  \\\n",
       "count         2.872533e+06     262268.000000        2.859392e+06   \n",
       "mean          1.834354e+03        109.872508        3.265258e+01   \n",
       "std           1.105689e+03         25.870036        1.844274e+00   \n",
       "min           5.640000e+00         57.000000        2.475000e+01   \n",
       "25%           8.931600e+02         90.000000        3.143750e+01   \n",
       "50%           1.790830e+03        108.000000        3.312500e+01   \n",
       "75%           2.710570e+03        125.000000        3.400000e+01   \n",
       "max           4.475630e+03        202.000000        3.550000e+01   \n",
       "\n",
       "       hand - 3D-acceleration scale: ±16g, resolution: 13-bit -1  \\\n",
       "count                                       2.859392e+06           \n",
       "mean                                       -4.960786e+00           \n",
       "std                                         5.985029e+00           \n",
       "min                                        -1.453670e+02           \n",
       "25%                                        -9.028420e+00           \n",
       "50%                                        -5.788145e+00           \n",
       "75%                                        -7.829420e-01           \n",
       "max                                         6.285960e+01           \n",
       "\n",
       "       hand - 3D-acceleration scale: ±16g, resolution: 13-bit -2  \\\n",
       "count                                       2.859392e+06           \n",
       "mean                                        3.587758e+00           \n",
       "std                                         6.277838e+00           \n",
       "min                                        -1.043010e+02           \n",
       "25%                                         1.290268e+00           \n",
       "50%                                         3.570830e+00           \n",
       "75%                                         6.602720e+00           \n",
       "max                                         1.556990e+02           \n",
       "\n",
       "       hand - 3D-acceleration scale: ±16g, resolution: 13-bit -3  \\\n",
       "count                                       2.859392e+06           \n",
       "mean                                        3.168417e+00           \n",
       "std                                         3.843923e+00           \n",
       "min                                        -1.014520e+02           \n",
       "25%                                         9.685818e-01           \n",
       "50%                                         2.958415e+00           \n",
       "75%                                         6.002930e+00           \n",
       "max                                         1.577600e+02           \n",
       "\n",
       "       hand - 3D-acceleration scale: ±6g, resolution: 13-bit* -1  \\\n",
       "count                                       2.859392e+06           \n",
       "mean                                       -4.889420e+00           \n",
       "std                                         5.992726e+00           \n",
       "min                                        -6.148950e+01           \n",
       "25%                                        -8.933270e+00           \n",
       "50%                                        -5.737615e+00           \n",
       "75%                                        -7.249920e-01           \n",
       "max                                         5.282140e+01           \n",
       "\n",
       "       hand - 3D-acceleration scale: ±6g, resolution: 13-bit* -2  \\\n",
       "count                                       2.859392e+06           \n",
       "mean                                        3.584267e+00           \n",
       "std                                         6.055750e+00           \n",
       "min                                        -6.186800e+01           \n",
       "25%                                         1.284680e+00           \n",
       "50%                                         3.613430e+00           \n",
       "75%                                         6.601960e+00           \n",
       "max                                         6.225980e+01           \n",
       "\n",
       "       hand - 3D-acceleration scale: ±6g, resolution: 13-bit* -3  \\\n",
       "count                                       2.859392e+06           \n",
       "mean                                        3.349479e+00           \n",
       "std                                         3.840650e+00           \n",
       "min                                        -6.193470e+01           \n",
       "25%                                         1.164040e+00           \n",
       "50%                                         3.132855e+00           \n",
       "75%                                         6.257612e+00           \n",
       "max                                         6.194460e+01           \n",
       "\n",
       "       hand - 3D-gyroscope -1  ...  ankle - 3D-gyroscope -1  \\\n",
       "count            2.859392e+06  ...             2.860784e+06   \n",
       "mean            -3.704744e-03  ...             8.635143e-03   \n",
       "std              1.297393e+00  ...             1.073556e+00   \n",
       "min             -2.813540e+01  ...            -2.399500e+01   \n",
       "25%             -3.477165e-01  ...            -1.526250e-01   \n",
       "50%             -6.160635e-03  ...             4.251595e-03   \n",
       "75%              3.028320e-01  ...             9.464213e-02   \n",
       "max              2.641580e+01  ...             1.742040e+01   \n",
       "\n",
       "       ankle - 3D-gyroscope -2  ankle - 3D-gyroscope -3  \\\n",
       "count             2.860784e+06             2.860784e+06   \n",
       "mean             -3.450122e-02             7.752030e-03   \n",
       "std               5.966026e-01             1.842552e+00   \n",
       "min              -1.812690e+01            -1.401960e+01   \n",
       "25%              -8.267093e-02            -3.084595e-01   \n",
       "50%              -4.249850e-03            -2.216015e-03   \n",
       "75%               8.296868e-02             6.343258e-02   \n",
       "max               1.358820e+01             1.652880e+01   \n",
       "\n",
       "       ankle - 3D-magnetometer -1  ankle - 3D-magnetometer -2  \\\n",
       "count                2.860784e+06                2.860784e+06   \n",
       "mean                -3.272102e+01                1.593304e+00   \n",
       "std                  1.887860e+01                2.161181e+01   \n",
       "min                 -1.728650e+02               -1.379080e+02   \n",
       "25%                 -4.289480e+01               -1.148540e+01   \n",
       "50%                 -3.390020e+01                1.362615e+00   \n",
       "75%                 -1.905920e+01                1.733090e+01   \n",
       "max                  9.752550e+01                1.233060e+02   \n",
       "\n",
       "       ankle - 3D-magnetometer -3  \\\n",
       "count                2.860784e+06   \n",
       "mean                 1.689044e+01   \n",
       "std                  2.030858e+01   \n",
       "min                 -1.092890e+02   \n",
       "25%                  3.289348e+00   \n",
       "50%                  1.809105e+01   \n",
       "75%                  3.087820e+01   \n",
       "max                  1.469000e+02   \n",
       "\n",
       "       ankle - orientation (invalid in this data collection) -1  \\\n",
       "count                                       2.860784e+06          \n",
       "mean                                        3.986417e-01          \n",
       "std                                         3.034561e-01          \n",
       "min                                        -2.536280e-01          \n",
       "25%                                         1.563440e-01          \n",
       "50%                                         3.197555e-01          \n",
       "75%                                         5.794420e-01          \n",
       "max                                         1.000000e+00          \n",
       "\n",
       "       ankle - orientation (invalid in this data collection) -2  \\\n",
       "count                                       2.860784e+06          \n",
       "mean                                        2.154835e-02          \n",
       "std                                         5.691302e-01          \n",
       "min                                        -9.568760e-01          \n",
       "25%                                        -5.839910e-01          \n",
       "50%                                         0.000000e+00          \n",
       "75%                                         6.279450e-01          \n",
       "max                                         9.595380e-01          \n",
       "\n",
       "       ankle - orientation (invalid in this data collection) -3  \\\n",
       "count                                       2.860784e+06          \n",
       "mean                                        3.091533e-01          \n",
       "std                                         3.237875e-01          \n",
       "min                                        -8.768380e-01          \n",
       "25%                                         1.087023e-02          \n",
       "50%                                         3.043820e-01          \n",
       "75%                                         6.020032e-01          \n",
       "max                                         9.923540e-01          \n",
       "\n",
       "       ankle - orientation (invalid in this data collection) -4  \n",
       "count                                       2.860784e+06         \n",
       "mean                                       -1.878725e-02         \n",
       "std                                         4.731373e-01         \n",
       "min                                        -9.972810e-01         \n",
       "25%                                        -5.047580e-01         \n",
       "50%                                         0.000000e+00         \n",
       "75%                                         4.634432e-01         \n",
       "max                                         9.961050e-01         \n",
       "\n",
       "[8 rows x 53 columns]"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#print descriptive Statistics of the dataframe\n",
    "df_all_data.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "125c6175",
   "metadata": {},
   "source": [
    "# DATA CLEANING AND WRANGLING\n",
    "\n",
    "Data cleaning and wrangling will be done in this section to remove any features that aren't relevant, remove any empty entries, and add any new features that the model will need."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e5b0b242",
   "metadata": {},
   "source": [
    "# Step 1: \n",
    "\n",
    "Per the data collector's recommendation in the data report file, I dropped all activities with Activity IDs equal to zero (929,661). putting the total dataset to be 1,942,872 rows and 55 columns; These are simply transient activities involving moving from one location to the next or waiting for equipment to be ready, eventually if not dropped they will results in outliers for analysis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "f699c24f",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " Shape of the dataframe After: (1942872, 55)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Subject_ID</th>\n",
       "      <th>timestamp (seconds)</th>\n",
       "      <th>activity ID</th>\n",
       "      <th>heart rate (bpm)</th>\n",
       "      <th>hand - temperature</th>\n",
       "      <th>hand - 3D-acceleration scale: ±16g, resolution: 13-bit -1</th>\n",
       "      <th>hand - 3D-acceleration scale: ±16g, resolution: 13-bit -2</th>\n",
       "      <th>hand - 3D-acceleration scale: ±16g, resolution: 13-bit -3</th>\n",
       "      <th>hand - 3D-acceleration scale: ±6g, resolution: 13-bit* -1</th>\n",
       "      <th>hand - 3D-acceleration scale: ±6g, resolution: 13-bit* -2</th>\n",
       "      <th>...</th>\n",
       "      <th>ankle - 3D-gyroscope -1</th>\n",
       "      <th>ankle - 3D-gyroscope -2</th>\n",
       "      <th>ankle - 3D-gyroscope -3</th>\n",
       "      <th>ankle - 3D-magnetometer -1</th>\n",
       "      <th>ankle - 3D-magnetometer -2</th>\n",
       "      <th>ankle - 3D-magnetometer -3</th>\n",
       "      <th>ankle - orientation (invalid in this data collection) -1</th>\n",
       "      <th>ankle - orientation (invalid in this data collection) -2</th>\n",
       "      <th>ankle - orientation (invalid in this data collection) -3</th>\n",
       "      <th>ankle - orientation (invalid in this data collection) -4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2928</th>\n",
       "      <td>101</td>\n",
       "      <td>37.66</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.21530</td>\n",
       "      <td>8.27915</td>\n",
       "      <td>5.58753</td>\n",
       "      <td>2.24689</td>\n",
       "      <td>8.55387</td>\n",
       "      <td>...</td>\n",
       "      <td>0.002908</td>\n",
       "      <td>-0.027714</td>\n",
       "      <td>0.001752</td>\n",
       "      <td>-61.1081</td>\n",
       "      <td>-36.8636</td>\n",
       "      <td>-58.3696</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2929</th>\n",
       "      <td>101</td>\n",
       "      <td>37.67</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.29196</td>\n",
       "      <td>7.67288</td>\n",
       "      <td>5.74467</td>\n",
       "      <td>2.27373</td>\n",
       "      <td>8.14592</td>\n",
       "      <td>...</td>\n",
       "      <td>0.020882</td>\n",
       "      <td>0.000945</td>\n",
       "      <td>0.006007</td>\n",
       "      <td>-60.8916</td>\n",
       "      <td>-36.3197</td>\n",
       "      <td>-58.3656</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2930</th>\n",
       "      <td>101</td>\n",
       "      <td>37.68</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.29090</td>\n",
       "      <td>7.14240</td>\n",
       "      <td>5.82342</td>\n",
       "      <td>2.26966</td>\n",
       "      <td>7.66268</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.035392</td>\n",
       "      <td>-0.052422</td>\n",
       "      <td>-0.004882</td>\n",
       "      <td>-60.3407</td>\n",
       "      <td>-35.7842</td>\n",
       "      <td>-58.6119</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2931</th>\n",
       "      <td>101</td>\n",
       "      <td>37.69</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.21800</td>\n",
       "      <td>7.14365</td>\n",
       "      <td>5.89930</td>\n",
       "      <td>2.22177</td>\n",
       "      <td>7.25535</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.032514</td>\n",
       "      <td>-0.018844</td>\n",
       "      <td>0.026950</td>\n",
       "      <td>-60.7646</td>\n",
       "      <td>-37.1028</td>\n",
       "      <td>-57.8799</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2932</th>\n",
       "      <td>101</td>\n",
       "      <td>37.70</td>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.30106</td>\n",
       "      <td>7.25857</td>\n",
       "      <td>6.09259</td>\n",
       "      <td>2.20720</td>\n",
       "      <td>7.24042</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001351</td>\n",
       "      <td>-0.048878</td>\n",
       "      <td>-0.006328</td>\n",
       "      <td>-60.2040</td>\n",
       "      <td>-37.1225</td>\n",
       "      <td>-57.8847</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 55 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Subject_ID  timestamp (seconds) activity ID  heart rate (bpm)  \\\n",
       "2928        101                37.66           1               NaN   \n",
       "2929        101                37.67           1               NaN   \n",
       "2930        101                37.68           1               NaN   \n",
       "2931        101                37.69           1               NaN   \n",
       "2932        101                37.70           1             100.0   \n",
       "\n",
       "      hand - temperature  \\\n",
       "2928              30.375   \n",
       "2929              30.375   \n",
       "2930              30.375   \n",
       "2931              30.375   \n",
       "2932              30.375   \n",
       "\n",
       "      hand - 3D-acceleration scale: ±16g, resolution: 13-bit -1  \\\n",
       "2928                                            2.21530           \n",
       "2929                                            2.29196           \n",
       "2930                                            2.29090           \n",
       "2931                                            2.21800           \n",
       "2932                                            2.30106           \n",
       "\n",
       "      hand - 3D-acceleration scale: ±16g, resolution: 13-bit -2  \\\n",
       "2928                                            8.27915           \n",
       "2929                                            7.67288           \n",
       "2930                                            7.14240           \n",
       "2931                                            7.14365           \n",
       "2932                                            7.25857           \n",
       "\n",
       "      hand - 3D-acceleration scale: ±16g, resolution: 13-bit -3  \\\n",
       "2928                                            5.58753           \n",
       "2929                                            5.74467           \n",
       "2930                                            5.82342           \n",
       "2931                                            5.89930           \n",
       "2932                                            6.09259           \n",
       "\n",
       "      hand - 3D-acceleration scale: ±6g, resolution: 13-bit* -1  \\\n",
       "2928                                            2.24689           \n",
       "2929                                            2.27373           \n",
       "2930                                            2.26966           \n",
       "2931                                            2.22177           \n",
       "2932                                            2.20720           \n",
       "\n",
       "      hand - 3D-acceleration scale: ±6g, resolution: 13-bit* -2  ...  \\\n",
       "2928                                            8.55387          ...   \n",
       "2929                                            8.14592          ...   \n",
       "2930                                            7.66268          ...   \n",
       "2931                                            7.25535          ...   \n",
       "2932                                            7.24042          ...   \n",
       "\n",
       "      ankle - 3D-gyroscope -1  ankle - 3D-gyroscope -2  \\\n",
       "2928                 0.002908                -0.027714   \n",
       "2929                 0.020882                 0.000945   \n",
       "2930                -0.035392                -0.052422   \n",
       "2931                -0.032514                -0.018844   \n",
       "2932                 0.001351                -0.048878   \n",
       "\n",
       "      ankle - 3D-gyroscope -3  ankle - 3D-magnetometer -1  \\\n",
       "2928                 0.001752                    -61.1081   \n",
       "2929                 0.006007                    -60.8916   \n",
       "2930                -0.004882                    -60.3407   \n",
       "2931                 0.026950                    -60.7646   \n",
       "2932                -0.006328                    -60.2040   \n",
       "\n",
       "      ankle - 3D-magnetometer -2  ankle - 3D-magnetometer -3  \\\n",
       "2928                    -36.8636                    -58.3696   \n",
       "2929                    -36.3197                    -58.3656   \n",
       "2930                    -35.7842                    -58.6119   \n",
       "2931                    -37.1028                    -57.8799   \n",
       "2932                    -37.1225                    -57.8847   \n",
       "\n",
       "      ankle - orientation (invalid in this data collection) -1  \\\n",
       "2928                                                1.0          \n",
       "2929                                                1.0          \n",
       "2930                                                1.0          \n",
       "2931                                                1.0          \n",
       "2932                                                1.0          \n",
       "\n",
       "      ankle - orientation (invalid in this data collection) -2  \\\n",
       "2928                                                0.0          \n",
       "2929                                                0.0          \n",
       "2930                                                0.0          \n",
       "2931                                                0.0          \n",
       "2932                                                0.0          \n",
       "\n",
       "      ankle - orientation (invalid in this data collection) -3  \\\n",
       "2928                                                0.0          \n",
       "2929                                                0.0          \n",
       "2930                                                0.0          \n",
       "2931                                                0.0          \n",
       "2932                                                0.0          \n",
       "\n",
       "      ankle - orientation (invalid in this data collection) -4  \n",
       "2928                                                0.0         \n",
       "2929                                                0.0         \n",
       "2930                                                0.0         \n",
       "2931                                                0.0         \n",
       "2932                                                0.0         \n",
       "\n",
       "[5 rows x 55 columns]"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# dropped transient activities ( # activity ID that is equal to Zero)\n",
    "\n",
    "df_all_data =df_all_data.loc[df_all_data['activity ID']!=0]\n",
    "\n",
    "print(\"\\n Shape of the dataframe After:\", df_all_data.shape)\n",
    "\n",
    "df_all_data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f8eb5bd2",
   "metadata": {},
   "source": [
    "# Step 2: \n",
    "\n",
    "I dropped all accelerometers with scales ±6g since the data collector advised that specific movements when using this device could have a higher impact on the data output than when accelerometers with scales ±6g used. After dropping this features, the current data sum up same 1,942,872 rows with 46 colums which reduced by reduced 9."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "1dee4570",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " All column dropped:\n",
      " Index(['hand - 3D-acceleration scale: ±6g, resolution: 13-bit* -1',\n",
      "       'hand - 3D-acceleration scale: ±6g, resolution: 13-bit* -2',\n",
      "       'hand - 3D-acceleration scale: ±6g, resolution: 13-bit* -3',\n",
      "       'chest - 3D-acceleration scale: ±6g, resolution: 13-bit* -1',\n",
      "       'chest - 3D-acceleration scale: ±6g, resolution: 13-bit* -2',\n",
      "       'chest - 3D-acceleration scale: ±6g, resolution: 13-bit* -3',\n",
      "       'ankle - 3D-acceleration scale: ±6g, resolution: 13-bit* -1',\n",
      "       'ankle - 3D-acceleration scale: ±6g, resolution: 13-bit* -2',\n",
      "       'ankle - 3D-acceleration scale: ±6g, resolution: 13-bit* -3'],\n",
      "      dtype='object')\n",
      "\n",
      "Shape of the dataframe After: (1942872, 46)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Subject_ID</th>\n",
       "      <th>timestamp (seconds)</th>\n",
       "      <th>activity ID</th>\n",
       "      <th>heart rate (bpm)</th>\n",
       "      <th>hand - temperature</th>\n",
       "      <th>hand - 3D-acceleration scale: ±16g, resolution: 13-bit -1</th>\n",
       "      <th>hand - 3D-acceleration scale: ±16g, resolution: 13-bit -2</th>\n",
       "      <th>hand - 3D-acceleration scale: ±16g, resolution: 13-bit -3</th>\n",
       "      <th>hand - 3D-gyroscope -1</th>\n",
       "      <th>hand - 3D-gyroscope -2</th>\n",
       "      <th>...</th>\n",
       "      <th>ankle - 3D-gyroscope -1</th>\n",
       "      <th>ankle - 3D-gyroscope -2</th>\n",
       "      <th>ankle - 3D-gyroscope -3</th>\n",
       "      <th>ankle - 3D-magnetometer -1</th>\n",
       "      <th>ankle - 3D-magnetometer -2</th>\n",
       "      <th>ankle - 3D-magnetometer -3</th>\n",
       "      <th>ankle - orientation (invalid in this data collection) -1</th>\n",
       "      <th>ankle - orientation (invalid in this data collection) -2</th>\n",
       "      <th>ankle - orientation (invalid in this data collection) -3</th>\n",
       "      <th>ankle - orientation (invalid in this data collection) -4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2928</th>\n",
       "      <td>101</td>\n",
       "      <td>37.66</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.21530</td>\n",
       "      <td>8.27915</td>\n",
       "      <td>5.58753</td>\n",
       "      <td>-0.004750</td>\n",
       "      <td>0.037579</td>\n",
       "      <td>...</td>\n",
       "      <td>0.002908</td>\n",
       "      <td>-0.027714</td>\n",
       "      <td>0.001752</td>\n",
       "      <td>-61.1081</td>\n",
       "      <td>-36.8636</td>\n",
       "      <td>-58.3696</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2929</th>\n",
       "      <td>101</td>\n",
       "      <td>37.67</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.29196</td>\n",
       "      <td>7.67288</td>\n",
       "      <td>5.74467</td>\n",
       "      <td>-0.171710</td>\n",
       "      <td>0.025479</td>\n",
       "      <td>...</td>\n",
       "      <td>0.020882</td>\n",
       "      <td>0.000945</td>\n",
       "      <td>0.006007</td>\n",
       "      <td>-60.8916</td>\n",
       "      <td>-36.3197</td>\n",
       "      <td>-58.3656</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2930</th>\n",
       "      <td>101</td>\n",
       "      <td>37.68</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.29090</td>\n",
       "      <td>7.14240</td>\n",
       "      <td>5.82342</td>\n",
       "      <td>-0.238241</td>\n",
       "      <td>0.011214</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.035392</td>\n",
       "      <td>-0.052422</td>\n",
       "      <td>-0.004882</td>\n",
       "      <td>-60.3407</td>\n",
       "      <td>-35.7842</td>\n",
       "      <td>-58.6119</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2931</th>\n",
       "      <td>101</td>\n",
       "      <td>37.69</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.21800</td>\n",
       "      <td>7.14365</td>\n",
       "      <td>5.89930</td>\n",
       "      <td>-0.192912</td>\n",
       "      <td>0.019053</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.032514</td>\n",
       "      <td>-0.018844</td>\n",
       "      <td>0.026950</td>\n",
       "      <td>-60.7646</td>\n",
       "      <td>-37.1028</td>\n",
       "      <td>-57.8799</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2932</th>\n",
       "      <td>101</td>\n",
       "      <td>37.70</td>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.30106</td>\n",
       "      <td>7.25857</td>\n",
       "      <td>6.09259</td>\n",
       "      <td>-0.069961</td>\n",
       "      <td>-0.018328</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001351</td>\n",
       "      <td>-0.048878</td>\n",
       "      <td>-0.006328</td>\n",
       "      <td>-60.2040</td>\n",
       "      <td>-37.1225</td>\n",
       "      <td>-57.8847</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 46 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Subject_ID  timestamp (seconds) activity ID  heart rate (bpm)  \\\n",
       "2928        101                37.66           1               NaN   \n",
       "2929        101                37.67           1               NaN   \n",
       "2930        101                37.68           1               NaN   \n",
       "2931        101                37.69           1               NaN   \n",
       "2932        101                37.70           1             100.0   \n",
       "\n",
       "      hand - temperature  \\\n",
       "2928              30.375   \n",
       "2929              30.375   \n",
       "2930              30.375   \n",
       "2931              30.375   \n",
       "2932              30.375   \n",
       "\n",
       "      hand - 3D-acceleration scale: ±16g, resolution: 13-bit -1  \\\n",
       "2928                                            2.21530           \n",
       "2929                                            2.29196           \n",
       "2930                                            2.29090           \n",
       "2931                                            2.21800           \n",
       "2932                                            2.30106           \n",
       "\n",
       "      hand - 3D-acceleration scale: ±16g, resolution: 13-bit -2  \\\n",
       "2928                                            8.27915           \n",
       "2929                                            7.67288           \n",
       "2930                                            7.14240           \n",
       "2931                                            7.14365           \n",
       "2932                                            7.25857           \n",
       "\n",
       "      hand - 3D-acceleration scale: ±16g, resolution: 13-bit -3  \\\n",
       "2928                                            5.58753           \n",
       "2929                                            5.74467           \n",
       "2930                                            5.82342           \n",
       "2931                                            5.89930           \n",
       "2932                                            6.09259           \n",
       "\n",
       "      hand - 3D-gyroscope -1  hand - 3D-gyroscope -2  ...  \\\n",
       "2928               -0.004750                0.037579  ...   \n",
       "2929               -0.171710                0.025479  ...   \n",
       "2930               -0.238241                0.011214  ...   \n",
       "2931               -0.192912                0.019053  ...   \n",
       "2932               -0.069961               -0.018328  ...   \n",
       "\n",
       "      ankle - 3D-gyroscope -1  ankle - 3D-gyroscope -2  \\\n",
       "2928                 0.002908                -0.027714   \n",
       "2929                 0.020882                 0.000945   \n",
       "2930                -0.035392                -0.052422   \n",
       "2931                -0.032514                -0.018844   \n",
       "2932                 0.001351                -0.048878   \n",
       "\n",
       "      ankle - 3D-gyroscope -3  ankle - 3D-magnetometer -1  \\\n",
       "2928                 0.001752                    -61.1081   \n",
       "2929                 0.006007                    -60.8916   \n",
       "2930                -0.004882                    -60.3407   \n",
       "2931                 0.026950                    -60.7646   \n",
       "2932                -0.006328                    -60.2040   \n",
       "\n",
       "      ankle - 3D-magnetometer -2  ankle - 3D-magnetometer -3  \\\n",
       "2928                    -36.8636                    -58.3696   \n",
       "2929                    -36.3197                    -58.3656   \n",
       "2930                    -35.7842                    -58.6119   \n",
       "2931                    -37.1028                    -57.8799   \n",
       "2932                    -37.1225                    -57.8847   \n",
       "\n",
       "      ankle - orientation (invalid in this data collection) -1  \\\n",
       "2928                                                1.0          \n",
       "2929                                                1.0          \n",
       "2930                                                1.0          \n",
       "2931                                                1.0          \n",
       "2932                                                1.0          \n",
       "\n",
       "      ankle - orientation (invalid in this data collection) -2  \\\n",
       "2928                                                0.0          \n",
       "2929                                                0.0          \n",
       "2930                                                0.0          \n",
       "2931                                                0.0          \n",
       "2932                                                0.0          \n",
       "\n",
       "      ankle - orientation (invalid in this data collection) -3  \\\n",
       "2928                                                0.0          \n",
       "2929                                                0.0          \n",
       "2930                                                0.0          \n",
       "2931                                                0.0          \n",
       "2932                                                0.0          \n",
       "\n",
       "      ankle - orientation (invalid in this data collection) -4  \n",
       "2928                                                0.0         \n",
       "2929                                                0.0         \n",
       "2930                                                0.0         \n",
       "2931                                                0.0         \n",
       "2932                                                0.0         \n",
       "\n",
       "[5 rows x 46 columns]"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#copy original dataframe\n",
    "\n",
    "df_all_data = df_all_data.copy()\n",
    "\n",
    "# Dropped all columns - Acceleration: scale: ±6g\n",
    "columns_to_drop = df_all_data.filter(regex='scale: ±6g').columns\n",
    "\n",
    "# Drop the columns and modify the existing dataframe\n",
    "df_all_data.drop(columns=columns_to_drop, inplace=True)\n",
    "\n",
    "print(\"\\n All column dropped:\\n\", columns_to_drop)\n",
    "print(\"\\nShape of the dataframe After:\", df_all_data.shape)\n",
    "\n",
    "df_all_data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "041b77f2",
   "metadata": {},
   "source": [
    "# Step 3:\n",
    "\n",
    "As part of the data cleaning process, I have removed the 'invalid in this data collection' title in the dataset as it doesn't have significant. After which the total data stands at 1,942,872 rows × 34 columns which mean the total number of 12 columns of invalid orientation data has been removed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "e8d961ea",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " All column dropped:\n",
      " Index(['hand - orientation (invalid in this data collection) -1',\n",
      "       'hand - orientation (invalid in this data collection) -2',\n",
      "       'hand - orientation (invalid in this data collection) -3',\n",
      "       'hand - orientation (invalid in this data collection) -4',\n",
      "       'chest - orientation (invalid in this data collection) -1',\n",
      "       'chest - orientation (invalid in this data collection) -2',\n",
      "       'chest - orientation (invalid in this data collection) -3',\n",
      "       'chest - orientation (invalid in this data collection) -4',\n",
      "       'ankle - orientation (invalid in this data collection) -1',\n",
      "       'ankle - orientation (invalid in this data collection) -2',\n",
      "       'ankle - orientation (invalid in this data collection) -3',\n",
      "       'ankle - orientation (invalid in this data collection) -4'],\n",
      "      dtype='object')\n",
      "\n",
      "Shape of the dataframe After: (1942872, 34)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Subject_ID</th>\n",
       "      <th>timestamp (seconds)</th>\n",
       "      <th>activity ID</th>\n",
       "      <th>heart rate (bpm)</th>\n",
       "      <th>hand - temperature</th>\n",
       "      <th>hand - 3D-acceleration scale: ±16g, resolution: 13-bit -1</th>\n",
       "      <th>hand - 3D-acceleration scale: ±16g, resolution: 13-bit -2</th>\n",
       "      <th>hand - 3D-acceleration scale: ±16g, resolution: 13-bit -3</th>\n",
       "      <th>hand - 3D-gyroscope -1</th>\n",
       "      <th>hand - 3D-gyroscope -2</th>\n",
       "      <th>...</th>\n",
       "      <th>ankle - temperature</th>\n",
       "      <th>ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -1</th>\n",
       "      <th>ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -2</th>\n",
       "      <th>ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -3</th>\n",
       "      <th>ankle - 3D-gyroscope -1</th>\n",
       "      <th>ankle - 3D-gyroscope -2</th>\n",
       "      <th>ankle - 3D-gyroscope -3</th>\n",
       "      <th>ankle - 3D-magnetometer -1</th>\n",
       "      <th>ankle - 3D-magnetometer -2</th>\n",
       "      <th>ankle - 3D-magnetometer -3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2928</th>\n",
       "      <td>101</td>\n",
       "      <td>37.66</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.21530</td>\n",
       "      <td>8.27915</td>\n",
       "      <td>5.58753</td>\n",
       "      <td>-0.004750</td>\n",
       "      <td>0.037579</td>\n",
       "      <td>...</td>\n",
       "      <td>30.75</td>\n",
       "      <td>9.73855</td>\n",
       "      <td>-1.84761</td>\n",
       "      <td>0.095156</td>\n",
       "      <td>0.002908</td>\n",
       "      <td>-0.027714</td>\n",
       "      <td>0.001752</td>\n",
       "      <td>-61.1081</td>\n",
       "      <td>-36.8636</td>\n",
       "      <td>-58.3696</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2929</th>\n",
       "      <td>101</td>\n",
       "      <td>37.67</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.29196</td>\n",
       "      <td>7.67288</td>\n",
       "      <td>5.74467</td>\n",
       "      <td>-0.171710</td>\n",
       "      <td>0.025479</td>\n",
       "      <td>...</td>\n",
       "      <td>30.75</td>\n",
       "      <td>9.69762</td>\n",
       "      <td>-1.88438</td>\n",
       "      <td>-0.020804</td>\n",
       "      <td>0.020882</td>\n",
       "      <td>0.000945</td>\n",
       "      <td>0.006007</td>\n",
       "      <td>-60.8916</td>\n",
       "      <td>-36.3197</td>\n",
       "      <td>-58.3656</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2930</th>\n",
       "      <td>101</td>\n",
       "      <td>37.68</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.29090</td>\n",
       "      <td>7.14240</td>\n",
       "      <td>5.82342</td>\n",
       "      <td>-0.238241</td>\n",
       "      <td>0.011214</td>\n",
       "      <td>...</td>\n",
       "      <td>30.75</td>\n",
       "      <td>9.69633</td>\n",
       "      <td>-1.92203</td>\n",
       "      <td>-0.059173</td>\n",
       "      <td>-0.035392</td>\n",
       "      <td>-0.052422</td>\n",
       "      <td>-0.004882</td>\n",
       "      <td>-60.3407</td>\n",
       "      <td>-35.7842</td>\n",
       "      <td>-58.6119</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2931</th>\n",
       "      <td>101</td>\n",
       "      <td>37.69</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.21800</td>\n",
       "      <td>7.14365</td>\n",
       "      <td>5.89930</td>\n",
       "      <td>-0.192912</td>\n",
       "      <td>0.019053</td>\n",
       "      <td>...</td>\n",
       "      <td>30.75</td>\n",
       "      <td>9.66370</td>\n",
       "      <td>-1.84714</td>\n",
       "      <td>0.094385</td>\n",
       "      <td>-0.032514</td>\n",
       "      <td>-0.018844</td>\n",
       "      <td>0.026950</td>\n",
       "      <td>-60.7646</td>\n",
       "      <td>-37.1028</td>\n",
       "      <td>-57.8799</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2932</th>\n",
       "      <td>101</td>\n",
       "      <td>37.70</td>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.30106</td>\n",
       "      <td>7.25857</td>\n",
       "      <td>6.09259</td>\n",
       "      <td>-0.069961</td>\n",
       "      <td>-0.018328</td>\n",
       "      <td>...</td>\n",
       "      <td>30.75</td>\n",
       "      <td>9.77578</td>\n",
       "      <td>-1.88582</td>\n",
       "      <td>0.095775</td>\n",
       "      <td>0.001351</td>\n",
       "      <td>-0.048878</td>\n",
       "      <td>-0.006328</td>\n",
       "      <td>-60.2040</td>\n",
       "      <td>-37.1225</td>\n",
       "      <td>-57.8847</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 34 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Subject_ID  timestamp (seconds) activity ID  heart rate (bpm)  \\\n",
       "2928        101                37.66           1               NaN   \n",
       "2929        101                37.67           1               NaN   \n",
       "2930        101                37.68           1               NaN   \n",
       "2931        101                37.69           1               NaN   \n",
       "2932        101                37.70           1             100.0   \n",
       "\n",
       "      hand - temperature  \\\n",
       "2928              30.375   \n",
       "2929              30.375   \n",
       "2930              30.375   \n",
       "2931              30.375   \n",
       "2932              30.375   \n",
       "\n",
       "      hand - 3D-acceleration scale: ±16g, resolution: 13-bit -1  \\\n",
       "2928                                            2.21530           \n",
       "2929                                            2.29196           \n",
       "2930                                            2.29090           \n",
       "2931                                            2.21800           \n",
       "2932                                            2.30106           \n",
       "\n",
       "      hand - 3D-acceleration scale: ±16g, resolution: 13-bit -2  \\\n",
       "2928                                            8.27915           \n",
       "2929                                            7.67288           \n",
       "2930                                            7.14240           \n",
       "2931                                            7.14365           \n",
       "2932                                            7.25857           \n",
       "\n",
       "      hand - 3D-acceleration scale: ±16g, resolution: 13-bit -3  \\\n",
       "2928                                            5.58753           \n",
       "2929                                            5.74467           \n",
       "2930                                            5.82342           \n",
       "2931                                            5.89930           \n",
       "2932                                            6.09259           \n",
       "\n",
       "      hand - 3D-gyroscope -1  hand - 3D-gyroscope -2  ...  \\\n",
       "2928               -0.004750                0.037579  ...   \n",
       "2929               -0.171710                0.025479  ...   \n",
       "2930               -0.238241                0.011214  ...   \n",
       "2931               -0.192912                0.019053  ...   \n",
       "2932               -0.069961               -0.018328  ...   \n",
       "\n",
       "      ankle - temperature  \\\n",
       "2928                30.75   \n",
       "2929                30.75   \n",
       "2930                30.75   \n",
       "2931                30.75   \n",
       "2932                30.75   \n",
       "\n",
       "      ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -1  \\\n",
       "2928                                            9.73855            \n",
       "2929                                            9.69762            \n",
       "2930                                            9.69633            \n",
       "2931                                            9.66370            \n",
       "2932                                            9.77578            \n",
       "\n",
       "      ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -2  \\\n",
       "2928                                           -1.84761            \n",
       "2929                                           -1.88438            \n",
       "2930                                           -1.92203            \n",
       "2931                                           -1.84714            \n",
       "2932                                           -1.88582            \n",
       "\n",
       "      ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -3  \\\n",
       "2928                                           0.095156            \n",
       "2929                                          -0.020804            \n",
       "2930                                          -0.059173            \n",
       "2931                                           0.094385            \n",
       "2932                                           0.095775            \n",
       "\n",
       "      ankle - 3D-gyroscope -1  ankle - 3D-gyroscope -2  \\\n",
       "2928                 0.002908                -0.027714   \n",
       "2929                 0.020882                 0.000945   \n",
       "2930                -0.035392                -0.052422   \n",
       "2931                -0.032514                -0.018844   \n",
       "2932                 0.001351                -0.048878   \n",
       "\n",
       "      ankle - 3D-gyroscope -3  ankle - 3D-magnetometer -1  \\\n",
       "2928                 0.001752                    -61.1081   \n",
       "2929                 0.006007                    -60.8916   \n",
       "2930                -0.004882                    -60.3407   \n",
       "2931                 0.026950                    -60.7646   \n",
       "2932                -0.006328                    -60.2040   \n",
       "\n",
       "      ankle - 3D-magnetometer -2  ankle - 3D-magnetometer -3  \n",
       "2928                    -36.8636                    -58.3696  \n",
       "2929                    -36.3197                    -58.3656  \n",
       "2930                    -35.7842                    -58.6119  \n",
       "2931                    -37.1028                    -57.8799  \n",
       "2932                    -37.1225                    -57.8847  \n",
       "\n",
       "[5 rows x 34 columns]"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Step 3\n",
    "\n",
    "#droping invalid orientation data\n",
    "columns_to_drop1 = df_all_data.filter(regex='invalid in this data collection').columns\n",
    "\n",
    "# Dropped the columns and modify the existing dataframe\n",
    "df_all_data.drop(columns=columns_to_drop1, inplace=True)\n",
    "\n",
    "print(\"\\n All column dropped:\\n\", columns_to_drop1)\n",
    "print(\"\\nShape of the dataframe After:\", df_all_data.shape)\n",
    "\n",
    "df_all_data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f892c31",
   "metadata": {},
   "source": [
    "# Step 4:\n",
    "\n",
    "This section code is checked for missing values in the 'heart rate (bpm)' column and then printing the count of missing values.\n",
    "\n",
    "The amount of missing data (1,765,464) for heart rates is enormous and will affect the analysis outcome. Hence, I have decided to fill in the missing value with the backwards fill method to replace NaN values in the heart rate column in the dataset with values that follow after them in the same column. I believe this is the best approach because it is unlikely the heart rate will change significantly within the time frame; the heart sensors take the count, which is a rate of nine times a second"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "9d3628e6",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Total Missing Heart Rate (1,765,464)\n",
      "\n",
      " Shape of the dataframe After: (1942872, 34)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Subject_ID</th>\n",
       "      <th>timestamp (seconds)</th>\n",
       "      <th>activity ID</th>\n",
       "      <th>heart rate (bpm)</th>\n",
       "      <th>hand - temperature</th>\n",
       "      <th>hand - 3D-acceleration scale: ±16g, resolution: 13-bit -1</th>\n",
       "      <th>hand - 3D-acceleration scale: ±16g, resolution: 13-bit -2</th>\n",
       "      <th>hand - 3D-acceleration scale: ±16g, resolution: 13-bit -3</th>\n",
       "      <th>hand - 3D-gyroscope -1</th>\n",
       "      <th>hand - 3D-gyroscope -2</th>\n",
       "      <th>...</th>\n",
       "      <th>ankle - temperature</th>\n",
       "      <th>ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -1</th>\n",
       "      <th>ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -2</th>\n",
       "      <th>ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -3</th>\n",
       "      <th>ankle - 3D-gyroscope -1</th>\n",
       "      <th>ankle - 3D-gyroscope -2</th>\n",
       "      <th>ankle - 3D-gyroscope -3</th>\n",
       "      <th>ankle - 3D-magnetometer -1</th>\n",
       "      <th>ankle - 3D-magnetometer -2</th>\n",
       "      <th>ankle - 3D-magnetometer -3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2928</th>\n",
       "      <td>101</td>\n",
       "      <td>37.66</td>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.21530</td>\n",
       "      <td>8.27915</td>\n",
       "      <td>5.58753</td>\n",
       "      <td>-0.004750</td>\n",
       "      <td>0.037579</td>\n",
       "      <td>...</td>\n",
       "      <td>30.75</td>\n",
       "      <td>9.73855</td>\n",
       "      <td>-1.84761</td>\n",
       "      <td>0.095156</td>\n",
       "      <td>0.002908</td>\n",
       "      <td>-0.027714</td>\n",
       "      <td>0.001752</td>\n",
       "      <td>-61.1081</td>\n",
       "      <td>-36.8636</td>\n",
       "      <td>-58.3696</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2929</th>\n",
       "      <td>101</td>\n",
       "      <td>37.67</td>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.29196</td>\n",
       "      <td>7.67288</td>\n",
       "      <td>5.74467</td>\n",
       "      <td>-0.171710</td>\n",
       "      <td>0.025479</td>\n",
       "      <td>...</td>\n",
       "      <td>30.75</td>\n",
       "      <td>9.69762</td>\n",
       "      <td>-1.88438</td>\n",
       "      <td>-0.020804</td>\n",
       "      <td>0.020882</td>\n",
       "      <td>0.000945</td>\n",
       "      <td>0.006007</td>\n",
       "      <td>-60.8916</td>\n",
       "      <td>-36.3197</td>\n",
       "      <td>-58.3656</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2930</th>\n",
       "      <td>101</td>\n",
       "      <td>37.68</td>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.29090</td>\n",
       "      <td>7.14240</td>\n",
       "      <td>5.82342</td>\n",
       "      <td>-0.238241</td>\n",
       "      <td>0.011214</td>\n",
       "      <td>...</td>\n",
       "      <td>30.75</td>\n",
       "      <td>9.69633</td>\n",
       "      <td>-1.92203</td>\n",
       "      <td>-0.059173</td>\n",
       "      <td>-0.035392</td>\n",
       "      <td>-0.052422</td>\n",
       "      <td>-0.004882</td>\n",
       "      <td>-60.3407</td>\n",
       "      <td>-35.7842</td>\n",
       "      <td>-58.6119</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2931</th>\n",
       "      <td>101</td>\n",
       "      <td>37.69</td>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.21800</td>\n",
       "      <td>7.14365</td>\n",
       "      <td>5.89930</td>\n",
       "      <td>-0.192912</td>\n",
       "      <td>0.019053</td>\n",
       "      <td>...</td>\n",
       "      <td>30.75</td>\n",
       "      <td>9.66370</td>\n",
       "      <td>-1.84714</td>\n",
       "      <td>0.094385</td>\n",
       "      <td>-0.032514</td>\n",
       "      <td>-0.018844</td>\n",
       "      <td>0.026950</td>\n",
       "      <td>-60.7646</td>\n",
       "      <td>-37.1028</td>\n",
       "      <td>-57.8799</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2932</th>\n",
       "      <td>101</td>\n",
       "      <td>37.70</td>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.30106</td>\n",
       "      <td>7.25857</td>\n",
       "      <td>6.09259</td>\n",
       "      <td>-0.069961</td>\n",
       "      <td>-0.018328</td>\n",
       "      <td>...</td>\n",
       "      <td>30.75</td>\n",
       "      <td>9.77578</td>\n",
       "      <td>-1.88582</td>\n",
       "      <td>0.095775</td>\n",
       "      <td>0.001351</td>\n",
       "      <td>-0.048878</td>\n",
       "      <td>-0.006328</td>\n",
       "      <td>-60.2040</td>\n",
       "      <td>-37.1225</td>\n",
       "      <td>-57.8847</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 34 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Subject_ID  timestamp (seconds) activity ID  heart rate (bpm)  \\\n",
       "2928        101                37.66           1             100.0   \n",
       "2929        101                37.67           1             100.0   \n",
       "2930        101                37.68           1             100.0   \n",
       "2931        101                37.69           1             100.0   \n",
       "2932        101                37.70           1             100.0   \n",
       "\n",
       "      hand - temperature  \\\n",
       "2928              30.375   \n",
       "2929              30.375   \n",
       "2930              30.375   \n",
       "2931              30.375   \n",
       "2932              30.375   \n",
       "\n",
       "      hand - 3D-acceleration scale: ±16g, resolution: 13-bit -1  \\\n",
       "2928                                            2.21530           \n",
       "2929                                            2.29196           \n",
       "2930                                            2.29090           \n",
       "2931                                            2.21800           \n",
       "2932                                            2.30106           \n",
       "\n",
       "      hand - 3D-acceleration scale: ±16g, resolution: 13-bit -2  \\\n",
       "2928                                            8.27915           \n",
       "2929                                            7.67288           \n",
       "2930                                            7.14240           \n",
       "2931                                            7.14365           \n",
       "2932                                            7.25857           \n",
       "\n",
       "      hand - 3D-acceleration scale: ±16g, resolution: 13-bit -3  \\\n",
       "2928                                            5.58753           \n",
       "2929                                            5.74467           \n",
       "2930                                            5.82342           \n",
       "2931                                            5.89930           \n",
       "2932                                            6.09259           \n",
       "\n",
       "      hand - 3D-gyroscope -1  hand - 3D-gyroscope -2  ...  \\\n",
       "2928               -0.004750                0.037579  ...   \n",
       "2929               -0.171710                0.025479  ...   \n",
       "2930               -0.238241                0.011214  ...   \n",
       "2931               -0.192912                0.019053  ...   \n",
       "2932               -0.069961               -0.018328  ...   \n",
       "\n",
       "      ankle - temperature  \\\n",
       "2928                30.75   \n",
       "2929                30.75   \n",
       "2930                30.75   \n",
       "2931                30.75   \n",
       "2932                30.75   \n",
       "\n",
       "      ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -1  \\\n",
       "2928                                            9.73855            \n",
       "2929                                            9.69762            \n",
       "2930                                            9.69633            \n",
       "2931                                            9.66370            \n",
       "2932                                            9.77578            \n",
       "\n",
       "      ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -2  \\\n",
       "2928                                           -1.84761            \n",
       "2929                                           -1.88438            \n",
       "2930                                           -1.92203            \n",
       "2931                                           -1.84714            \n",
       "2932                                           -1.88582            \n",
       "\n",
       "      ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -3  \\\n",
       "2928                                           0.095156            \n",
       "2929                                          -0.020804            \n",
       "2930                                          -0.059173            \n",
       "2931                                           0.094385            \n",
       "2932                                           0.095775            \n",
       "\n",
       "      ankle - 3D-gyroscope -1  ankle - 3D-gyroscope -2  \\\n",
       "2928                 0.002908                -0.027714   \n",
       "2929                 0.020882                 0.000945   \n",
       "2930                -0.035392                -0.052422   \n",
       "2931                -0.032514                -0.018844   \n",
       "2932                 0.001351                -0.048878   \n",
       "\n",
       "      ankle - 3D-gyroscope -3  ankle - 3D-magnetometer -1  \\\n",
       "2928                 0.001752                    -61.1081   \n",
       "2929                 0.006007                    -60.8916   \n",
       "2930                -0.004882                    -60.3407   \n",
       "2931                 0.026950                    -60.7646   \n",
       "2932                -0.006328                    -60.2040   \n",
       "\n",
       "      ankle - 3D-magnetometer -2  ankle - 3D-magnetometer -3  \n",
       "2928                    -36.8636                    -58.3696  \n",
       "2929                    -36.3197                    -58.3656  \n",
       "2930                    -35.7842                    -58.6119  \n",
       "2931                    -37.1028                    -57.8799  \n",
       "2932                    -37.1225                    -57.8847  \n",
       "\n",
       "[5 rows x 34 columns]"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Viewing all missing heart counts \n",
    "missing_heart_rate_counts = df_all_data['heart rate (bpm)'].isna().sum()\n",
    "print(f'\\nTotal Missing Heart Rate ({missing_heart_rate_counts:,.0f})')\n",
    "\n",
    "# Fill missing values in the 'heart rate (bpm)' column using backward fill method\n",
    "df_all_data.loc[:, 'heart rate (bpm)'] = df_all_data.loc[:, ['heart rate (bpm)']].fillna(method='bfill', axis=0)\n",
    "\n",
    "print(\"\\n Shape of the dataframe After:\", df_all_data.shape)\n",
    "\n",
    "df_all_data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a495d721",
   "metadata": {},
   "source": [
    "# Step 5:\n",
    "\n",
    "The final cleaning and wrangling of the dataset is to drop all Nan values which is consist of 220,511 rows.Hence, the total dataset to work with stands at 1,921,430 rows × 34 columns "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "2f5043b5",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "31\n",
      "220511\n",
      "\n",
      " Shape of the final dataframe After Cleaning: (1921430, 34)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Subject_ID</th>\n",
       "      <th>timestamp (seconds)</th>\n",
       "      <th>activity ID</th>\n",
       "      <th>heart rate (bpm)</th>\n",
       "      <th>hand - temperature</th>\n",
       "      <th>hand - 3D-acceleration scale: ±16g, resolution: 13-bit -1</th>\n",
       "      <th>hand - 3D-acceleration scale: ±16g, resolution: 13-bit -2</th>\n",
       "      <th>hand - 3D-acceleration scale: ±16g, resolution: 13-bit -3</th>\n",
       "      <th>hand - 3D-gyroscope -1</th>\n",
       "      <th>hand - 3D-gyroscope -2</th>\n",
       "      <th>...</th>\n",
       "      <th>ankle - temperature</th>\n",
       "      <th>ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -1</th>\n",
       "      <th>ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -2</th>\n",
       "      <th>ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -3</th>\n",
       "      <th>ankle - 3D-gyroscope -1</th>\n",
       "      <th>ankle - 3D-gyroscope -2</th>\n",
       "      <th>ankle - 3D-gyroscope -3</th>\n",
       "      <th>ankle - 3D-magnetometer -1</th>\n",
       "      <th>ankle - 3D-magnetometer -2</th>\n",
       "      <th>ankle - 3D-magnetometer -3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2928</th>\n",
       "      <td>101</td>\n",
       "      <td>37.66</td>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.21530</td>\n",
       "      <td>8.27915</td>\n",
       "      <td>5.58753</td>\n",
       "      <td>-0.004750</td>\n",
       "      <td>0.037579</td>\n",
       "      <td>...</td>\n",
       "      <td>30.75</td>\n",
       "      <td>9.73855</td>\n",
       "      <td>-1.84761</td>\n",
       "      <td>0.095156</td>\n",
       "      <td>0.002908</td>\n",
       "      <td>-0.027714</td>\n",
       "      <td>0.001752</td>\n",
       "      <td>-61.1081</td>\n",
       "      <td>-36.8636</td>\n",
       "      <td>-58.3696</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2929</th>\n",
       "      <td>101</td>\n",
       "      <td>37.67</td>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.29196</td>\n",
       "      <td>7.67288</td>\n",
       "      <td>5.74467</td>\n",
       "      <td>-0.171710</td>\n",
       "      <td>0.025479</td>\n",
       "      <td>...</td>\n",
       "      <td>30.75</td>\n",
       "      <td>9.69762</td>\n",
       "      <td>-1.88438</td>\n",
       "      <td>-0.020804</td>\n",
       "      <td>0.020882</td>\n",
       "      <td>0.000945</td>\n",
       "      <td>0.006007</td>\n",
       "      <td>-60.8916</td>\n",
       "      <td>-36.3197</td>\n",
       "      <td>-58.3656</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2930</th>\n",
       "      <td>101</td>\n",
       "      <td>37.68</td>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.29090</td>\n",
       "      <td>7.14240</td>\n",
       "      <td>5.82342</td>\n",
       "      <td>-0.238241</td>\n",
       "      <td>0.011214</td>\n",
       "      <td>...</td>\n",
       "      <td>30.75</td>\n",
       "      <td>9.69633</td>\n",
       "      <td>-1.92203</td>\n",
       "      <td>-0.059173</td>\n",
       "      <td>-0.035392</td>\n",
       "      <td>-0.052422</td>\n",
       "      <td>-0.004882</td>\n",
       "      <td>-60.3407</td>\n",
       "      <td>-35.7842</td>\n",
       "      <td>-58.6119</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2931</th>\n",
       "      <td>101</td>\n",
       "      <td>37.69</td>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.21800</td>\n",
       "      <td>7.14365</td>\n",
       "      <td>5.89930</td>\n",
       "      <td>-0.192912</td>\n",
       "      <td>0.019053</td>\n",
       "      <td>...</td>\n",
       "      <td>30.75</td>\n",
       "      <td>9.66370</td>\n",
       "      <td>-1.84714</td>\n",
       "      <td>0.094385</td>\n",
       "      <td>-0.032514</td>\n",
       "      <td>-0.018844</td>\n",
       "      <td>0.026950</td>\n",
       "      <td>-60.7646</td>\n",
       "      <td>-37.1028</td>\n",
       "      <td>-57.8799</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2932</th>\n",
       "      <td>101</td>\n",
       "      <td>37.70</td>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.30106</td>\n",
       "      <td>7.25857</td>\n",
       "      <td>6.09259</td>\n",
       "      <td>-0.069961</td>\n",
       "      <td>-0.018328</td>\n",
       "      <td>...</td>\n",
       "      <td>30.75</td>\n",
       "      <td>9.77578</td>\n",
       "      <td>-1.88582</td>\n",
       "      <td>0.095775</td>\n",
       "      <td>0.001351</td>\n",
       "      <td>-0.048878</td>\n",
       "      <td>-0.006328</td>\n",
       "      <td>-60.2040</td>\n",
       "      <td>-37.1225</td>\n",
       "      <td>-57.8847</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 34 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Subject_ID  timestamp (seconds) activity ID  heart rate (bpm)  \\\n",
       "2928        101                37.66           1             100.0   \n",
       "2929        101                37.67           1             100.0   \n",
       "2930        101                37.68           1             100.0   \n",
       "2931        101                37.69           1             100.0   \n",
       "2932        101                37.70           1             100.0   \n",
       "\n",
       "      hand - temperature  \\\n",
       "2928              30.375   \n",
       "2929              30.375   \n",
       "2930              30.375   \n",
       "2931              30.375   \n",
       "2932              30.375   \n",
       "\n",
       "      hand - 3D-acceleration scale: ±16g, resolution: 13-bit -1  \\\n",
       "2928                                            2.21530           \n",
       "2929                                            2.29196           \n",
       "2930                                            2.29090           \n",
       "2931                                            2.21800           \n",
       "2932                                            2.30106           \n",
       "\n",
       "      hand - 3D-acceleration scale: ±16g, resolution: 13-bit -2  \\\n",
       "2928                                            8.27915           \n",
       "2929                                            7.67288           \n",
       "2930                                            7.14240           \n",
       "2931                                            7.14365           \n",
       "2932                                            7.25857           \n",
       "\n",
       "      hand - 3D-acceleration scale: ±16g, resolution: 13-bit -3  \\\n",
       "2928                                            5.58753           \n",
       "2929                                            5.74467           \n",
       "2930                                            5.82342           \n",
       "2931                                            5.89930           \n",
       "2932                                            6.09259           \n",
       "\n",
       "      hand - 3D-gyroscope -1  hand - 3D-gyroscope -2  ...  \\\n",
       "2928               -0.004750                0.037579  ...   \n",
       "2929               -0.171710                0.025479  ...   \n",
       "2930               -0.238241                0.011214  ...   \n",
       "2931               -0.192912                0.019053  ...   \n",
       "2932               -0.069961               -0.018328  ...   \n",
       "\n",
       "      ankle - temperature  \\\n",
       "2928                30.75   \n",
       "2929                30.75   \n",
       "2930                30.75   \n",
       "2931                30.75   \n",
       "2932                30.75   \n",
       "\n",
       "      ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -1  \\\n",
       "2928                                            9.73855            \n",
       "2929                                            9.69762            \n",
       "2930                                            9.69633            \n",
       "2931                                            9.66370            \n",
       "2932                                            9.77578            \n",
       "\n",
       "      ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -2  \\\n",
       "2928                                           -1.84761            \n",
       "2929                                           -1.88438            \n",
       "2930                                           -1.92203            \n",
       "2931                                           -1.84714            \n",
       "2932                                           -1.88582            \n",
       "\n",
       "      ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -3  \\\n",
       "2928                                           0.095156            \n",
       "2929                                          -0.020804            \n",
       "2930                                          -0.059173            \n",
       "2931                                           0.094385            \n",
       "2932                                           0.095775            \n",
       "\n",
       "      ankle - 3D-gyroscope -1  ankle - 3D-gyroscope -2  \\\n",
       "2928                 0.002908                -0.027714   \n",
       "2929                 0.020882                 0.000945   \n",
       "2930                -0.035392                -0.052422   \n",
       "2931                -0.032514                -0.018844   \n",
       "2932                 0.001351                -0.048878   \n",
       "\n",
       "      ankle - 3D-gyroscope -3  ankle - 3D-magnetometer -1  \\\n",
       "2928                 0.001752                    -61.1081   \n",
       "2929                 0.006007                    -60.8916   \n",
       "2930                -0.004882                    -60.3407   \n",
       "2931                 0.026950                    -60.7646   \n",
       "2932                -0.006328                    -60.2040   \n",
       "\n",
       "      ankle - 3D-magnetometer -2  ankle - 3D-magnetometer -3  \n",
       "2928                    -36.8636                    -58.3696  \n",
       "2929                    -36.3197                    -58.3656  \n",
       "2930                    -35.7842                    -58.6119  \n",
       "2931                    -37.1028                    -57.8799  \n",
       "2932                    -37.1225                    -57.8847  \n",
       "\n",
       "[5 rows x 34 columns]"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Count the number of incomplete records after filling missing heart rate data\n",
    "Nan_records_count = df_all_data.isna().any(axis=0).sum() #This line of code calculates the number of columns (features) that have at least one missing value after filling missing data specifically for the heart rate column\n",
    "print(Nan_records_count)\n",
    "\n",
    "# Print the sum of all NaN entries in the DataFrame\n",
    "print(df_all_data.isna().sum().sum())\n",
    "\n",
    "# Create a new DataFrame 'df_master' by dropping rows with any missing values\n",
    "\n",
    "df_all_data = df_all_data.dropna(axis=0, how='any')\n",
    "\n",
    "print(\"\\n Shape of the final dataframe After Cleaning:\", df_all_data.shape)\n",
    "\n",
    "df_all_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "e2ba9705",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No NaN values in the DataFrame.\n"
     ]
    }
   ],
   "source": [
    "# Check for NaN values in the entire DataFrame\n",
    "nan_summary = df_all_data.isna().sum()\n",
    "\n",
    "# Check if there are any NaN values in the entire DataFrame\n",
    "if df_all_data.isna().any().any():\n",
    "    print(\"There are NaN values in the DataFrame.\")\n",
    "else:\n",
    "    print(\"No NaN values in the DataFrame.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "59c0e8e9",
   "metadata": {},
   "source": [
    "# ADDING MORE FEATURES FOR OUR ANALYSIS FROM FILE\n",
    "\n",
    "For exploratory data analysis purpose, inserted additional column to the dataframe (df_final);Activity ID and METs from the data collection protocol file. I defined and map the activities ID to the activities name as describe in the report data file as well as extract the measurement unit of each activities and merged into the the overall and saved in dataframe(df_final)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "9b339ab9",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Subject_ID</th>\n",
       "      <th>timestamp (seconds)</th>\n",
       "      <th>activity_mapped</th>\n",
       "      <th>activity ID</th>\n",
       "      <th>heart rate (bpm)</th>\n",
       "      <th>hand - temperature</th>\n",
       "      <th>hand - 3D-acceleration scale: ±16g, resolution: 13-bit -1</th>\n",
       "      <th>hand - 3D-acceleration scale: ±16g, resolution: 13-bit -2</th>\n",
       "      <th>hand - 3D-acceleration scale: ±16g, resolution: 13-bit -3</th>\n",
       "      <th>hand - 3D-gyroscope -1</th>\n",
       "      <th>...</th>\n",
       "      <th>ankle - temperature</th>\n",
       "      <th>ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -1</th>\n",
       "      <th>ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -2</th>\n",
       "      <th>ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -3</th>\n",
       "      <th>ankle - 3D-gyroscope -1</th>\n",
       "      <th>ankle - 3D-gyroscope -2</th>\n",
       "      <th>ankle - 3D-gyroscope -3</th>\n",
       "      <th>ankle - 3D-magnetometer -1</th>\n",
       "      <th>ankle - 3D-magnetometer -2</th>\n",
       "      <th>ankle - 3D-magnetometer -3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2928</th>\n",
       "      <td>101</td>\n",
       "      <td>37.66</td>\n",
       "      <td>lying</td>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.21530</td>\n",
       "      <td>8.27915</td>\n",
       "      <td>5.58753</td>\n",
       "      <td>-0.004750</td>\n",
       "      <td>...</td>\n",
       "      <td>30.75</td>\n",
       "      <td>9.73855</td>\n",
       "      <td>-1.84761</td>\n",
       "      <td>0.095156</td>\n",
       "      <td>0.002908</td>\n",
       "      <td>-0.027714</td>\n",
       "      <td>0.001752</td>\n",
       "      <td>-61.1081</td>\n",
       "      <td>-36.8636</td>\n",
       "      <td>-58.3696</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2929</th>\n",
       "      <td>101</td>\n",
       "      <td>37.67</td>\n",
       "      <td>lying</td>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.29196</td>\n",
       "      <td>7.67288</td>\n",
       "      <td>5.74467</td>\n",
       "      <td>-0.171710</td>\n",
       "      <td>...</td>\n",
       "      <td>30.75</td>\n",
       "      <td>9.69762</td>\n",
       "      <td>-1.88438</td>\n",
       "      <td>-0.020804</td>\n",
       "      <td>0.020882</td>\n",
       "      <td>0.000945</td>\n",
       "      <td>0.006007</td>\n",
       "      <td>-60.8916</td>\n",
       "      <td>-36.3197</td>\n",
       "      <td>-58.3656</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2930</th>\n",
       "      <td>101</td>\n",
       "      <td>37.68</td>\n",
       "      <td>lying</td>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.29090</td>\n",
       "      <td>7.14240</td>\n",
       "      <td>5.82342</td>\n",
       "      <td>-0.238241</td>\n",
       "      <td>...</td>\n",
       "      <td>30.75</td>\n",
       "      <td>9.69633</td>\n",
       "      <td>-1.92203</td>\n",
       "      <td>-0.059173</td>\n",
       "      <td>-0.035392</td>\n",
       "      <td>-0.052422</td>\n",
       "      <td>-0.004882</td>\n",
       "      <td>-60.3407</td>\n",
       "      <td>-35.7842</td>\n",
       "      <td>-58.6119</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2931</th>\n",
       "      <td>101</td>\n",
       "      <td>37.69</td>\n",
       "      <td>lying</td>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.21800</td>\n",
       "      <td>7.14365</td>\n",
       "      <td>5.89930</td>\n",
       "      <td>-0.192912</td>\n",
       "      <td>...</td>\n",
       "      <td>30.75</td>\n",
       "      <td>9.66370</td>\n",
       "      <td>-1.84714</td>\n",
       "      <td>0.094385</td>\n",
       "      <td>-0.032514</td>\n",
       "      <td>-0.018844</td>\n",
       "      <td>0.026950</td>\n",
       "      <td>-60.7646</td>\n",
       "      <td>-37.1028</td>\n",
       "      <td>-57.8799</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2932</th>\n",
       "      <td>101</td>\n",
       "      <td>37.70</td>\n",
       "      <td>lying</td>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.30106</td>\n",
       "      <td>7.25857</td>\n",
       "      <td>6.09259</td>\n",
       "      <td>-0.069961</td>\n",
       "      <td>...</td>\n",
       "      <td>30.75</td>\n",
       "      <td>9.77578</td>\n",
       "      <td>-1.88582</td>\n",
       "      <td>0.095775</td>\n",
       "      <td>0.001351</td>\n",
       "      <td>-0.048878</td>\n",
       "      <td>-0.006328</td>\n",
       "      <td>-60.2040</td>\n",
       "      <td>-37.1225</td>\n",
       "      <td>-57.8847</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 35 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Subject_ID  timestamp (seconds) activity_mapped activity ID  \\\n",
       "2928        101                37.66           lying           1   \n",
       "2929        101                37.67           lying           1   \n",
       "2930        101                37.68           lying           1   \n",
       "2931        101                37.69           lying           1   \n",
       "2932        101                37.70           lying           1   \n",
       "\n",
       "      heart rate (bpm)  hand - temperature  \\\n",
       "2928             100.0              30.375   \n",
       "2929             100.0              30.375   \n",
       "2930             100.0              30.375   \n",
       "2931             100.0              30.375   \n",
       "2932             100.0              30.375   \n",
       "\n",
       "      hand - 3D-acceleration scale: ±16g, resolution: 13-bit -1  \\\n",
       "2928                                            2.21530           \n",
       "2929                                            2.29196           \n",
       "2930                                            2.29090           \n",
       "2931                                            2.21800           \n",
       "2932                                            2.30106           \n",
       "\n",
       "      hand - 3D-acceleration scale: ±16g, resolution: 13-bit -2  \\\n",
       "2928                                            8.27915           \n",
       "2929                                            7.67288           \n",
       "2930                                            7.14240           \n",
       "2931                                            7.14365           \n",
       "2932                                            7.25857           \n",
       "\n",
       "      hand - 3D-acceleration scale: ±16g, resolution: 13-bit -3  \\\n",
       "2928                                            5.58753           \n",
       "2929                                            5.74467           \n",
       "2930                                            5.82342           \n",
       "2931                                            5.89930           \n",
       "2932                                            6.09259           \n",
       "\n",
       "      hand - 3D-gyroscope -1  ...  ankle - temperature  \\\n",
       "2928               -0.004750  ...                30.75   \n",
       "2929               -0.171710  ...                30.75   \n",
       "2930               -0.238241  ...                30.75   \n",
       "2931               -0.192912  ...                30.75   \n",
       "2932               -0.069961  ...                30.75   \n",
       "\n",
       "      ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -1  \\\n",
       "2928                                            9.73855            \n",
       "2929                                            9.69762            \n",
       "2930                                            9.69633            \n",
       "2931                                            9.66370            \n",
       "2932                                            9.77578            \n",
       "\n",
       "      ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -2  \\\n",
       "2928                                           -1.84761            \n",
       "2929                                           -1.88438            \n",
       "2930                                           -1.92203            \n",
       "2931                                           -1.84714            \n",
       "2932                                           -1.88582            \n",
       "\n",
       "      ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -3  \\\n",
       "2928                                           0.095156            \n",
       "2929                                          -0.020804            \n",
       "2930                                          -0.059173            \n",
       "2931                                           0.094385            \n",
       "2932                                           0.095775            \n",
       "\n",
       "      ankle - 3D-gyroscope -1  ankle - 3D-gyroscope -2  \\\n",
       "2928                 0.002908                -0.027714   \n",
       "2929                 0.020882                 0.000945   \n",
       "2930                -0.035392                -0.052422   \n",
       "2931                -0.032514                -0.018844   \n",
       "2932                 0.001351                -0.048878   \n",
       "\n",
       "      ankle - 3D-gyroscope -3  ankle - 3D-magnetometer -1  \\\n",
       "2928                 0.001752                    -61.1081   \n",
       "2929                 0.006007                    -60.8916   \n",
       "2930                -0.004882                    -60.3407   \n",
       "2931                 0.026950                    -60.7646   \n",
       "2932                -0.006328                    -60.2040   \n",
       "\n",
       "      ankle - 3D-magnetometer -2  ankle - 3D-magnetometer -3  \n",
       "2928                    -36.8636                    -58.3696  \n",
       "2929                    -36.3197                    -58.3656  \n",
       "2930                    -35.7842                    -58.6119  \n",
       "2931                    -37.1028                    -57.8799  \n",
       "2932                    -37.1225                    -57.8847  \n",
       "\n",
       "[5 rows x 35 columns]"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create a dictionary that house and map 'activity ID' column to their activity name\n",
    "activity_mapping = {\n",
    "    1: 'lying', 2: 'sitting', 3: 'standing', 4: 'walking', 5: 'running',\n",
    "    6: 'cycling', 7: 'Nordic walking', 9: 'watching TV', 10: 'computer work',\n",
    "    11: 'car driving', 12: 'ascending stairs', 13: 'descending stairs',\n",
    "    16: 'vacuum cleaning', 17: 'ironing', 18: 'folding laundry',\n",
    "    19: 'house cleaning', 20: 'playing soccer', 24: 'rope jumping'\n",
    "}\n",
    "\n",
    "#mapping each activities code to the name\n",
    "activities_mapped = df_all_data['activity ID'].map(activity_mapping)\n",
    "\n",
    "# Use .insert to add the new column before the 'activity ID'\n",
    "df_all_data.insert(loc=df_all_data.columns.get_loc('activity ID') + 0 , column='activity_mapped', value = activities_mapped)\n",
    "\n",
    "# assigned the df_all_data to a new variable name and print modified DataFrame\n",
    "df_final = df_all_data\n",
    "df_final.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "c10e3bc1",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Subject_ID</th>\n",
       "      <th>timestamp (seconds)</th>\n",
       "      <th>METs</th>\n",
       "      <th>activity_mapped</th>\n",
       "      <th>activity ID</th>\n",
       "      <th>heart rate (bpm)</th>\n",
       "      <th>hand - temperature</th>\n",
       "      <th>hand - 3D-acceleration scale: ±16g, resolution: 13-bit -1</th>\n",
       "      <th>hand - 3D-acceleration scale: ±16g, resolution: 13-bit -2</th>\n",
       "      <th>hand - 3D-acceleration scale: ±16g, resolution: 13-bit -3</th>\n",
       "      <th>...</th>\n",
       "      <th>ankle - temperature</th>\n",
       "      <th>ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -1</th>\n",
       "      <th>ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -2</th>\n",
       "      <th>ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -3</th>\n",
       "      <th>ankle - 3D-gyroscope -1</th>\n",
       "      <th>ankle - 3D-gyroscope -2</th>\n",
       "      <th>ankle - 3D-gyroscope -3</th>\n",
       "      <th>ankle - 3D-magnetometer -1</th>\n",
       "      <th>ankle - 3D-magnetometer -2</th>\n",
       "      <th>ankle - 3D-magnetometer -3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2928</th>\n",
       "      <td>101</td>\n",
       "      <td>37.66</td>\n",
       "      <td>1.0</td>\n",
       "      <td>lying</td>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.21530</td>\n",
       "      <td>8.27915</td>\n",
       "      <td>5.58753</td>\n",
       "      <td>...</td>\n",
       "      <td>30.75</td>\n",
       "      <td>9.73855</td>\n",
       "      <td>-1.84761</td>\n",
       "      <td>0.095156</td>\n",
       "      <td>0.002908</td>\n",
       "      <td>-0.027714</td>\n",
       "      <td>0.001752</td>\n",
       "      <td>-61.1081</td>\n",
       "      <td>-36.8636</td>\n",
       "      <td>-58.3696</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2929</th>\n",
       "      <td>101</td>\n",
       "      <td>37.67</td>\n",
       "      <td>1.0</td>\n",
       "      <td>lying</td>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.29196</td>\n",
       "      <td>7.67288</td>\n",
       "      <td>5.74467</td>\n",
       "      <td>...</td>\n",
       "      <td>30.75</td>\n",
       "      <td>9.69762</td>\n",
       "      <td>-1.88438</td>\n",
       "      <td>-0.020804</td>\n",
       "      <td>0.020882</td>\n",
       "      <td>0.000945</td>\n",
       "      <td>0.006007</td>\n",
       "      <td>-60.8916</td>\n",
       "      <td>-36.3197</td>\n",
       "      <td>-58.3656</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2930</th>\n",
       "      <td>101</td>\n",
       "      <td>37.68</td>\n",
       "      <td>1.0</td>\n",
       "      <td>lying</td>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.29090</td>\n",
       "      <td>7.14240</td>\n",
       "      <td>5.82342</td>\n",
       "      <td>...</td>\n",
       "      <td>30.75</td>\n",
       "      <td>9.69633</td>\n",
       "      <td>-1.92203</td>\n",
       "      <td>-0.059173</td>\n",
       "      <td>-0.035392</td>\n",
       "      <td>-0.052422</td>\n",
       "      <td>-0.004882</td>\n",
       "      <td>-60.3407</td>\n",
       "      <td>-35.7842</td>\n",
       "      <td>-58.6119</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2931</th>\n",
       "      <td>101</td>\n",
       "      <td>37.69</td>\n",
       "      <td>1.0</td>\n",
       "      <td>lying</td>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.21800</td>\n",
       "      <td>7.14365</td>\n",
       "      <td>5.89930</td>\n",
       "      <td>...</td>\n",
       "      <td>30.75</td>\n",
       "      <td>9.66370</td>\n",
       "      <td>-1.84714</td>\n",
       "      <td>0.094385</td>\n",
       "      <td>-0.032514</td>\n",
       "      <td>-0.018844</td>\n",
       "      <td>0.026950</td>\n",
       "      <td>-60.7646</td>\n",
       "      <td>-37.1028</td>\n",
       "      <td>-57.8799</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2932</th>\n",
       "      <td>101</td>\n",
       "      <td>37.70</td>\n",
       "      <td>1.0</td>\n",
       "      <td>lying</td>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.30106</td>\n",
       "      <td>7.25857</td>\n",
       "      <td>6.09259</td>\n",
       "      <td>...</td>\n",
       "      <td>30.75</td>\n",
       "      <td>9.77578</td>\n",
       "      <td>-1.88582</td>\n",
       "      <td>0.095775</td>\n",
       "      <td>0.001351</td>\n",
       "      <td>-0.048878</td>\n",
       "      <td>-0.006328</td>\n",
       "      <td>-60.2040</td>\n",
       "      <td>-37.1225</td>\n",
       "      <td>-57.8847</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 36 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Subject_ID  timestamp (seconds)  METs activity_mapped activity ID  \\\n",
       "2928        101                37.66   1.0           lying           1   \n",
       "2929        101                37.67   1.0           lying           1   \n",
       "2930        101                37.68   1.0           lying           1   \n",
       "2931        101                37.69   1.0           lying           1   \n",
       "2932        101                37.70   1.0           lying           1   \n",
       "\n",
       "      heart rate (bpm)  hand - temperature  \\\n",
       "2928             100.0              30.375   \n",
       "2929             100.0              30.375   \n",
       "2930             100.0              30.375   \n",
       "2931             100.0              30.375   \n",
       "2932             100.0              30.375   \n",
       "\n",
       "      hand - 3D-acceleration scale: ±16g, resolution: 13-bit -1  \\\n",
       "2928                                            2.21530           \n",
       "2929                                            2.29196           \n",
       "2930                                            2.29090           \n",
       "2931                                            2.21800           \n",
       "2932                                            2.30106           \n",
       "\n",
       "      hand - 3D-acceleration scale: ±16g, resolution: 13-bit -2  \\\n",
       "2928                                            8.27915           \n",
       "2929                                            7.67288           \n",
       "2930                                            7.14240           \n",
       "2931                                            7.14365           \n",
       "2932                                            7.25857           \n",
       "\n",
       "      hand - 3D-acceleration scale: ±16g, resolution: 13-bit -3  ...  \\\n",
       "2928                                            5.58753          ...   \n",
       "2929                                            5.74467          ...   \n",
       "2930                                            5.82342          ...   \n",
       "2931                                            5.89930          ...   \n",
       "2932                                            6.09259          ...   \n",
       "\n",
       "      ankle - temperature  \\\n",
       "2928                30.75   \n",
       "2929                30.75   \n",
       "2930                30.75   \n",
       "2931                30.75   \n",
       "2932                30.75   \n",
       "\n",
       "      ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -1  \\\n",
       "2928                                            9.73855            \n",
       "2929                                            9.69762            \n",
       "2930                                            9.69633            \n",
       "2931                                            9.66370            \n",
       "2932                                            9.77578            \n",
       "\n",
       "      ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -2  \\\n",
       "2928                                           -1.84761            \n",
       "2929                                           -1.88438            \n",
       "2930                                           -1.92203            \n",
       "2931                                           -1.84714            \n",
       "2932                                           -1.88582            \n",
       "\n",
       "      ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -3  \\\n",
       "2928                                           0.095156            \n",
       "2929                                          -0.020804            \n",
       "2930                                          -0.059173            \n",
       "2931                                           0.094385            \n",
       "2932                                           0.095775            \n",
       "\n",
       "      ankle - 3D-gyroscope -1  ankle - 3D-gyroscope -2  \\\n",
       "2928                 0.002908                -0.027714   \n",
       "2929                 0.020882                 0.000945   \n",
       "2930                -0.035392                -0.052422   \n",
       "2931                -0.032514                -0.018844   \n",
       "2932                 0.001351                -0.048878   \n",
       "\n",
       "      ankle - 3D-gyroscope -3  ankle - 3D-magnetometer -1  \\\n",
       "2928                 0.001752                    -61.1081   \n",
       "2929                 0.006007                    -60.8916   \n",
       "2930                -0.004882                    -60.3407   \n",
       "2931                 0.026950                    -60.7646   \n",
       "2932                -0.006328                    -60.2040   \n",
       "\n",
       "      ankle - 3D-magnetometer -2  ankle - 3D-magnetometer -3  \n",
       "2928                    -36.8636                    -58.3696  \n",
       "2929                    -36.3197                    -58.3656  \n",
       "2930                    -35.7842                    -58.6119  \n",
       "2931                    -37.1028                    -57.8799  \n",
       "2932                    -37.1225                    -57.8847  \n",
       "\n",
       "[5 rows x 36 columns]"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Inserting addition column for METs figures;  by taking average of any unit with range value\n",
    "\n",
    "activity_MET = {\n",
    "    'lying': 1, 'sitting': 1.8, 'standing': 1.8, 'walking': 3.55, 'running': 7.5,\n",
    "    'cycling': 4, 'Nordic walking': 5.5, 'watching TV': 1, 'computer work': 1.8,\n",
    "    'car driving': 1.8, 'ascending stairs': 8, 'descending stairs': 3,\n",
    "    'vacuum cleaning': 3.5, 'ironing': 2.3, 'folding laundry': 2.3,\n",
    "    'house cleaning': 3.5, 'playing soccer': 7.5, 'rope jumping': 9\n",
    "}\n",
    "\n",
    "# mapping activity ID name to their unit of measurement\n",
    "MET = df_final['activity_mapped'].map(activity_MET)\n",
    "\n",
    "df_final.insert(loc=df_final.columns.get_loc('activity_mapped') + 0, column='METs', value=MET)\n",
    "\n",
    "# Display the modified DataFrame\n",
    "df_final.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "53cb23c2",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>timestamp (seconds)</th>\n",
       "      <th>METs</th>\n",
       "      <th>heart rate (bpm)</th>\n",
       "      <th>hand - temperature</th>\n",
       "      <th>hand - 3D-acceleration scale: ±16g, resolution: 13-bit -1</th>\n",
       "      <th>hand - 3D-acceleration scale: ±16g, resolution: 13-bit -2</th>\n",
       "      <th>hand - 3D-acceleration scale: ±16g, resolution: 13-bit -3</th>\n",
       "      <th>hand - 3D-gyroscope -1</th>\n",
       "      <th>hand - 3D-gyroscope -2</th>\n",
       "      <th>hand - 3D-gyroscope -3</th>\n",
       "      <th>...</th>\n",
       "      <th>ankle - temperature</th>\n",
       "      <th>ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -1</th>\n",
       "      <th>ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -2</th>\n",
       "      <th>ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -3</th>\n",
       "      <th>ankle - 3D-gyroscope -1</th>\n",
       "      <th>ankle - 3D-gyroscope -2</th>\n",
       "      <th>ankle - 3D-gyroscope -3</th>\n",
       "      <th>ankle - 3D-magnetometer -1</th>\n",
       "      <th>ankle - 3D-magnetometer -2</th>\n",
       "      <th>ankle - 3D-magnetometer -3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1.921430e+06</td>\n",
       "      <td>1.921430e+06</td>\n",
       "      <td>1.921430e+06</td>\n",
       "      <td>1.921430e+06</td>\n",
       "      <td>1.921430e+06</td>\n",
       "      <td>1.921430e+06</td>\n",
       "      <td>1.921430e+06</td>\n",
       "      <td>1.921430e+06</td>\n",
       "      <td>1.921430e+06</td>\n",
       "      <td>1.921430e+06</td>\n",
       "      <td>...</td>\n",
       "      <td>1.921430e+06</td>\n",
       "      <td>1.921430e+06</td>\n",
       "      <td>1.921430e+06</td>\n",
       "      <td>1.921430e+06</td>\n",
       "      <td>1.921430e+06</td>\n",
       "      <td>1.921430e+06</td>\n",
       "      <td>1.921430e+06</td>\n",
       "      <td>1.921430e+06</td>\n",
       "      <td>1.921430e+06</td>\n",
       "      <td>1.921430e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1.695396e+03</td>\n",
       "      <td>3.593358e+00</td>\n",
       "      <td>1.073274e+02</td>\n",
       "      <td>3.276112e+01</td>\n",
       "      <td>-4.933050e+00</td>\n",
       "      <td>3.581020e+00</td>\n",
       "      <td>3.614219e+00</td>\n",
       "      <td>9.735881e-04</td>\n",
       "      <td>3.962901e-02</td>\n",
       "      <td>-3.223483e-03</td>\n",
       "      <td>...</td>\n",
       "      <td>3.371458e+01</td>\n",
       "      <td>9.385043e+00</td>\n",
       "      <td>-1.761423e-01</td>\n",
       "      <td>-2.592582e+00</td>\n",
       "      <td>8.082058e-03</td>\n",
       "      <td>-3.399395e-02</td>\n",
       "      <td>1.527136e-03</td>\n",
       "      <td>-3.153366e+01</td>\n",
       "      <td>1.383610e+00</td>\n",
       "      <td>1.724153e+01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.091503e+03</td>\n",
       "      <td>2.134410e+00</td>\n",
       "      <td>2.696864e+01</td>\n",
       "      <td>1.790627e+00</td>\n",
       "      <td>6.231438e+00</td>\n",
       "      <td>6.876808e+00</td>\n",
       "      <td>3.958097e+00</td>\n",
       "      <td>1.326006e+00</td>\n",
       "      <td>9.518233e-01</td>\n",
       "      <td>1.592012e+00</td>\n",
       "      <td>...</td>\n",
       "      <td>1.092283e+00</td>\n",
       "      <td>6.497136e+00</td>\n",
       "      <td>7.689378e+00</td>\n",
       "      <td>3.910120e+00</td>\n",
       "      <td>1.121347e+00</td>\n",
       "      <td>6.333404e-01</td>\n",
       "      <td>1.992152e+00</td>\n",
       "      <td>1.837863e+01</td>\n",
       "      <td>2.168108e+01</td>\n",
       "      <td>1.975140e+01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>3.120000e+01</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>5.700000e+01</td>\n",
       "      <td>2.487500e+01</td>\n",
       "      <td>-1.453670e+02</td>\n",
       "      <td>-1.043010e+02</td>\n",
       "      <td>-1.014520e+02</td>\n",
       "      <td>-2.813540e+01</td>\n",
       "      <td>-1.784950e+01</td>\n",
       "      <td>-1.426470e+01</td>\n",
       "      <td>...</td>\n",
       "      <td>3.000000e+01</td>\n",
       "      <td>-1.468510e+02</td>\n",
       "      <td>-1.574430e+02</td>\n",
       "      <td>-1.589260e+02</td>\n",
       "      <td>-2.399500e+01</td>\n",
       "      <td>-1.812690e+01</td>\n",
       "      <td>-1.401960e+01</td>\n",
       "      <td>-1.728650e+02</td>\n",
       "      <td>-1.379080e+02</td>\n",
       "      <td>-1.027160e+02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>7.394500e+02</td>\n",
       "      <td>1.800000e+00</td>\n",
       "      <td>8.600000e+01</td>\n",
       "      <td>3.168750e+01</td>\n",
       "      <td>-8.954100e+00</td>\n",
       "      <td>1.053952e+00</td>\n",
       "      <td>1.165512e+00</td>\n",
       "      <td>-3.756370e-01</td>\n",
       "      <td>-2.215670e-01</td>\n",
       "      <td>-3.783740e-01</td>\n",
       "      <td>...</td>\n",
       "      <td>3.300000e+01</td>\n",
       "      <td>8.425230e+00</td>\n",
       "      <td>-2.180162e+00</td>\n",
       "      <td>-3.807288e+00</td>\n",
       "      <td>-2.041545e-01</td>\n",
       "      <td>-1.032140e-01</td>\n",
       "      <td>-4.298120e-01</td>\n",
       "      <td>-4.170310e+01</td>\n",
       "      <td>-1.247240e+01</td>\n",
       "      <td>3.695065e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1.467160e+03</td>\n",
       "      <td>3.500000e+00</td>\n",
       "      <td>1.040000e+02</td>\n",
       "      <td>3.318750e+01</td>\n",
       "      <td>-5.421065e+00</td>\n",
       "      <td>3.524910e+00</td>\n",
       "      <td>3.444250e+00</td>\n",
       "      <td>-6.034280e-03</td>\n",
       "      <td>5.911870e-03</td>\n",
       "      <td>-5.603950e-03</td>\n",
       "      <td>...</td>\n",
       "      <td>3.406250e+01</td>\n",
       "      <td>9.535955e+00</td>\n",
       "      <td>-2.960910e-01</td>\n",
       "      <td>-2.417420e+00</td>\n",
       "      <td>4.584065e-03</td>\n",
       "      <td>-3.821090e-03</td>\n",
       "      <td>-2.250020e-03</td>\n",
       "      <td>-3.393250e+01</td>\n",
       "      <td>7.720815e-01</td>\n",
       "      <td>1.875010e+01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2.654610e+03</td>\n",
       "      <td>4.000000e+00</td>\n",
       "      <td>1.240000e+02</td>\n",
       "      <td>3.406250e+01</td>\n",
       "      <td>-9.359038e-01</td>\n",
       "      <td>6.455540e+00</td>\n",
       "      <td>6.542855e+00</td>\n",
       "      <td>3.314790e-01</td>\n",
       "      <td>2.648282e-01</td>\n",
       "      <td>3.623493e-01</td>\n",
       "      <td>...</td>\n",
       "      <td>3.450000e+01</td>\n",
       "      <td>1.026070e+01</td>\n",
       "      <td>1.767740e+00</td>\n",
       "      <td>-1.043240e+00</td>\n",
       "      <td>1.272070e-01</td>\n",
       "      <td>1.152478e-01</td>\n",
       "      <td>8.914332e-02</td>\n",
       "      <td>-1.776930e+01</td>\n",
       "      <td>1.780170e+01</td>\n",
       "      <td>3.126240e+01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>4.245680e+03</td>\n",
       "      <td>9.000000e+00</td>\n",
       "      <td>2.020000e+02</td>\n",
       "      <td>3.550000e+01</td>\n",
       "      <td>6.285960e+01</td>\n",
       "      <td>1.556990e+02</td>\n",
       "      <td>1.577600e+02</td>\n",
       "      <td>2.641580e+01</td>\n",
       "      <td>2.307790e+01</td>\n",
       "      <td>1.433840e+01</td>\n",
       "      <td>...</td>\n",
       "      <td>3.543750e+01</td>\n",
       "      <td>1.572320e+02</td>\n",
       "      <td>1.561900e+02</td>\n",
       "      <td>1.588720e+02</td>\n",
       "      <td>1.644270e+01</td>\n",
       "      <td>1.358820e+01</td>\n",
       "      <td>1.652880e+01</td>\n",
       "      <td>9.155160e+01</td>\n",
       "      <td>9.424780e+01</td>\n",
       "      <td>1.469000e+02</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows × 33 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       timestamp (seconds)          METs  heart rate (bpm)  \\\n",
       "count         1.921430e+06  1.921430e+06      1.921430e+06   \n",
       "mean          1.695396e+03  3.593358e+00      1.073274e+02   \n",
       "std           1.091503e+03  2.134410e+00      2.696864e+01   \n",
       "min           3.120000e+01  1.000000e+00      5.700000e+01   \n",
       "25%           7.394500e+02  1.800000e+00      8.600000e+01   \n",
       "50%           1.467160e+03  3.500000e+00      1.040000e+02   \n",
       "75%           2.654610e+03  4.000000e+00      1.240000e+02   \n",
       "max           4.245680e+03  9.000000e+00      2.020000e+02   \n",
       "\n",
       "       hand - temperature  \\\n",
       "count        1.921430e+06   \n",
       "mean         3.276112e+01   \n",
       "std          1.790627e+00   \n",
       "min          2.487500e+01   \n",
       "25%          3.168750e+01   \n",
       "50%          3.318750e+01   \n",
       "75%          3.406250e+01   \n",
       "max          3.550000e+01   \n",
       "\n",
       "       hand - 3D-acceleration scale: ±16g, resolution: 13-bit -1  \\\n",
       "count                                       1.921430e+06           \n",
       "mean                                       -4.933050e+00           \n",
       "std                                         6.231438e+00           \n",
       "min                                        -1.453670e+02           \n",
       "25%                                        -8.954100e+00           \n",
       "50%                                        -5.421065e+00           \n",
       "75%                                        -9.359038e-01           \n",
       "max                                         6.285960e+01           \n",
       "\n",
       "       hand - 3D-acceleration scale: ±16g, resolution: 13-bit -2  \\\n",
       "count                                       1.921430e+06           \n",
       "mean                                        3.581020e+00           \n",
       "std                                         6.876808e+00           \n",
       "min                                        -1.043010e+02           \n",
       "25%                                         1.053952e+00           \n",
       "50%                                         3.524910e+00           \n",
       "75%                                         6.455540e+00           \n",
       "max                                         1.556990e+02           \n",
       "\n",
       "       hand - 3D-acceleration scale: ±16g, resolution: 13-bit -3  \\\n",
       "count                                       1.921430e+06           \n",
       "mean                                        3.614219e+00           \n",
       "std                                         3.958097e+00           \n",
       "min                                        -1.014520e+02           \n",
       "25%                                         1.165512e+00           \n",
       "50%                                         3.444250e+00           \n",
       "75%                                         6.542855e+00           \n",
       "max                                         1.577600e+02           \n",
       "\n",
       "       hand - 3D-gyroscope -1  hand - 3D-gyroscope -2  hand - 3D-gyroscope -3  \\\n",
       "count            1.921430e+06            1.921430e+06            1.921430e+06   \n",
       "mean             9.735881e-04            3.962901e-02           -3.223483e-03   \n",
       "std              1.326006e+00            9.518233e-01            1.592012e+00   \n",
       "min             -2.813540e+01           -1.784950e+01           -1.426470e+01   \n",
       "25%             -3.756370e-01           -2.215670e-01           -3.783740e-01   \n",
       "50%             -6.034280e-03            5.911870e-03           -5.603950e-03   \n",
       "75%              3.314790e-01            2.648282e-01            3.623493e-01   \n",
       "max              2.641580e+01            2.307790e+01            1.433840e+01   \n",
       "\n",
       "       ...  ankle - temperature  \\\n",
       "count  ...         1.921430e+06   \n",
       "mean   ...         3.371458e+01   \n",
       "std    ...         1.092283e+00   \n",
       "min    ...         3.000000e+01   \n",
       "25%    ...         3.300000e+01   \n",
       "50%    ...         3.406250e+01   \n",
       "75%    ...         3.450000e+01   \n",
       "max    ...         3.543750e+01   \n",
       "\n",
       "       ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -1  \\\n",
       "count                                       1.921430e+06            \n",
       "mean                                        9.385043e+00            \n",
       "std                                         6.497136e+00            \n",
       "min                                        -1.468510e+02            \n",
       "25%                                         8.425230e+00            \n",
       "50%                                         9.535955e+00            \n",
       "75%                                         1.026070e+01            \n",
       "max                                         1.572320e+02            \n",
       "\n",
       "       ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -2  \\\n",
       "count                                       1.921430e+06            \n",
       "mean                                       -1.761423e-01            \n",
       "std                                         7.689378e+00            \n",
       "min                                        -1.574430e+02            \n",
       "25%                                        -2.180162e+00            \n",
       "50%                                        -2.960910e-01            \n",
       "75%                                         1.767740e+00            \n",
       "max                                         1.561900e+02            \n",
       "\n",
       "       ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -3  \\\n",
       "count                                       1.921430e+06            \n",
       "mean                                       -2.592582e+00            \n",
       "std                                         3.910120e+00            \n",
       "min                                        -1.589260e+02            \n",
       "25%                                        -3.807288e+00            \n",
       "50%                                        -2.417420e+00            \n",
       "75%                                        -1.043240e+00            \n",
       "max                                         1.588720e+02            \n",
       "\n",
       "       ankle - 3D-gyroscope -1  ankle - 3D-gyroscope -2  \\\n",
       "count             1.921430e+06             1.921430e+06   \n",
       "mean              8.082058e-03            -3.399395e-02   \n",
       "std               1.121347e+00             6.333404e-01   \n",
       "min              -2.399500e+01            -1.812690e+01   \n",
       "25%              -2.041545e-01            -1.032140e-01   \n",
       "50%               4.584065e-03            -3.821090e-03   \n",
       "75%               1.272070e-01             1.152478e-01   \n",
       "max               1.644270e+01             1.358820e+01   \n",
       "\n",
       "       ankle - 3D-gyroscope -3  ankle - 3D-magnetometer -1  \\\n",
       "count             1.921430e+06                1.921430e+06   \n",
       "mean              1.527136e-03               -3.153366e+01   \n",
       "std               1.992152e+00                1.837863e+01   \n",
       "min              -1.401960e+01               -1.728650e+02   \n",
       "25%              -4.298120e-01               -4.170310e+01   \n",
       "50%              -2.250020e-03               -3.393250e+01   \n",
       "75%               8.914332e-02               -1.776930e+01   \n",
       "max               1.652880e+01                9.155160e+01   \n",
       "\n",
       "       ankle - 3D-magnetometer -2  ankle - 3D-magnetometer -3  \n",
       "count                1.921430e+06                1.921430e+06  \n",
       "mean                 1.383610e+00                1.724153e+01  \n",
       "std                  2.168108e+01                1.975140e+01  \n",
       "min                 -1.379080e+02               -1.027160e+02  \n",
       "25%                 -1.247240e+01                3.695065e+00  \n",
       "50%                  7.720815e-01                1.875010e+01  \n",
       "75%                  1.780170e+01                3.126240e+01  \n",
       "max                  9.424780e+01                1.469000e+02  \n",
       "\n",
       "[8 rows x 33 columns]"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#print descriptive Statistics of the dataframe\n",
    "df_final.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "8d3c7dd4",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 1921430 entries, 2928 to 2872018\n",
      "Data columns (total 36 columns):\n",
      " #   Column                                                      Dtype  \n",
      "---  ------                                                      -----  \n",
      " 0   Subject_ID                                                  object \n",
      " 1   timestamp (seconds)                                         float64\n",
      " 2   METs                                                        float64\n",
      " 3   activity_mapped                                             object \n",
      " 4   activity ID                                                 object \n",
      " 5   heart rate (bpm)                                            float64\n",
      " 6   hand - temperature                                          float64\n",
      " 7   hand - 3D-acceleration scale: ±16g, resolution: 13-bit -1   float64\n",
      " 8   hand - 3D-acceleration scale: ±16g, resolution: 13-bit -2   float64\n",
      " 9   hand - 3D-acceleration scale: ±16g, resolution: 13-bit -3   float64\n",
      " 10  hand - 3D-gyroscope -1                                      float64\n",
      " 11  hand - 3D-gyroscope -2                                      float64\n",
      " 12  hand - 3D-gyroscope -3                                      float64\n",
      " 13  hand - 3D-magnetometer -1                                   float64\n",
      " 14  hand - 3D-magnetometer -2                                   float64\n",
      " 15  hand - 3D-magnetometer -3                                   float64\n",
      " 16  chest - temperature                                         float64\n",
      " 17  chest - 3D-acceleration scale: ±16g, resolution: 13-bit -1  float64\n",
      " 18  chest - 3D-acceleration scale: ±16g, resolution: 13-bit -2  float64\n",
      " 19  chest - 3D-acceleration scale: ±16g, resolution: 13-bit -3  float64\n",
      " 20  chest - 3D-gyroscope -1                                     float64\n",
      " 21  chest - 3D-gyroscope -2                                     float64\n",
      " 22  chest - 3D-gyroscope -3                                     float64\n",
      " 23  chest - 3D-magnetometer -1                                  float64\n",
      " 24  chest - 3D-magnetometer -2                                  float64\n",
      " 25  chest - 3D-magnetometer -3                                  float64\n",
      " 26  ankle - temperature                                         float64\n",
      " 27  ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -1  float64\n",
      " 28  ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -2  float64\n",
      " 29  ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -3  float64\n",
      " 30  ankle - 3D-gyroscope -1                                     float64\n",
      " 31  ankle - 3D-gyroscope -2                                     float64\n",
      " 32  ankle - 3D-gyroscope -3                                     float64\n",
      " 33  ankle - 3D-magnetometer -1                                  float64\n",
      " 34  ankle - 3D-magnetometer -2                                  float64\n",
      " 35  ankle - 3D-magnetometer -3                                  float64\n",
      "dtypes: float64(33), object(3)\n",
      "memory usage: 542.4+ MB\n"
     ]
    }
   ],
   "source": [
    "df_final.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "a779c60a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No NaN values in the DataFrame.\n"
     ]
    }
   ],
   "source": [
    "# Check for NaN values in the entire DataFrame\n",
    "nan_summary = df_final.isna().sum()\n",
    "\n",
    "# Check if there are any NaN values in the entire DataFrame\n",
    "if df_final.isna().any().any():\n",
    "    print(\"There are NaN values in the DataFrame.\")\n",
    "else:\n",
    "    print(\"No NaN values in the DataFrame.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d5ee9391",
   "metadata": {},
   "source": [
    "# Summary\n",
    "\n",
    "The final dataset, which I will be working with for my report(Visualization and Modeling) consist of 1,921,430 rows × 36 columns after cleaning and wrangling.\n",
    "\n",
    "The data collector's recommendations guides all cleaning and organising. Also the inclusion of two additional columns(Heart rate and IMU units) was done in accordance with seen them to be vital for this report."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8aec09aa",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "12b78253",
   "metadata": {},
   "source": [
    "# ONE-HOT ENCODING"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0a8d11a6",
   "metadata": {},
   "source": [
    "One-hot encoding is necessary since our data frame contains categorical data, and the course module's contents demand this method to transform the data into a format suitable for the type of model(Linear regression/K-mean clustering) covered. Hence, I will use METs as a cutoff point to classify the activity ID according to the intensity to perform EDA and Modelling efficiently. \n",
    "\n",
    "Activity Classification: classified activities into three categories based on MET values: \n",
    "\n",
    "- METs cutoff_light = 3.0\n",
    "- Mets cutoff_moderate = 6.0\n",
    "\n",
    "with the following condition for the classification\n",
    "- \"light_activities\" for activities with METs value < cutoff_light, \n",
    "- Moderate_activities >= cutoff_light & <= cutoff_moderate \n",
    "- \"vigorous_activities\" for activities with > cutoff_moderate.\n",
    "\n",
    "- This MET cut score for classifying activities into \"light\", \"Moderate\" and \"vigorous\" aligns with relevant literature obtained from online articles and research papers (https://www.hsph.harvard.edu/obesity-prevention-source/moderate-and-vigorous-physical-activity/ and https://www.healthline.com/health/what-are-mets#bottom-line)\n",
    "\n",
    "- Low Intensity: 1.5 METs or less (e.g., sitting)\n",
    "- Moderate Intensity: 3 to 6 METs (e.g., walking)\n",
    "- Vigorous Intensity: More than 6 METs (e.g., running)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "3aec72ed",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Subject_ID</th>\n",
       "      <th>timestamp (seconds)</th>\n",
       "      <th>activity_level</th>\n",
       "      <th>METs</th>\n",
       "      <th>activity_mapped</th>\n",
       "      <th>activity ID</th>\n",
       "      <th>heart rate (bpm)</th>\n",
       "      <th>hand - temperature</th>\n",
       "      <th>hand - 3D-acceleration scale: ±16g, resolution: 13-bit -1</th>\n",
       "      <th>hand - 3D-acceleration scale: ±16g, resolution: 13-bit -2</th>\n",
       "      <th>...</th>\n",
       "      <th>ankle - temperature</th>\n",
       "      <th>ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -1</th>\n",
       "      <th>ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -2</th>\n",
       "      <th>ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -3</th>\n",
       "      <th>ankle - 3D-gyroscope -1</th>\n",
       "      <th>ankle - 3D-gyroscope -2</th>\n",
       "      <th>ankle - 3D-gyroscope -3</th>\n",
       "      <th>ankle - 3D-magnetometer -1</th>\n",
       "      <th>ankle - 3D-magnetometer -2</th>\n",
       "      <th>ankle - 3D-magnetometer -3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2928</th>\n",
       "      <td>101</td>\n",
       "      <td>37.66</td>\n",
       "      <td>light</td>\n",
       "      <td>1.0</td>\n",
       "      <td>lying</td>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.21530</td>\n",
       "      <td>8.27915</td>\n",
       "      <td>...</td>\n",
       "      <td>30.75</td>\n",
       "      <td>9.73855</td>\n",
       "      <td>-1.84761</td>\n",
       "      <td>0.095156</td>\n",
       "      <td>0.002908</td>\n",
       "      <td>-0.027714</td>\n",
       "      <td>0.001752</td>\n",
       "      <td>-61.1081</td>\n",
       "      <td>-36.8636</td>\n",
       "      <td>-58.3696</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2929</th>\n",
       "      <td>101</td>\n",
       "      <td>37.67</td>\n",
       "      <td>light</td>\n",
       "      <td>1.0</td>\n",
       "      <td>lying</td>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.29196</td>\n",
       "      <td>7.67288</td>\n",
       "      <td>...</td>\n",
       "      <td>30.75</td>\n",
       "      <td>9.69762</td>\n",
       "      <td>-1.88438</td>\n",
       "      <td>-0.020804</td>\n",
       "      <td>0.020882</td>\n",
       "      <td>0.000945</td>\n",
       "      <td>0.006007</td>\n",
       "      <td>-60.8916</td>\n",
       "      <td>-36.3197</td>\n",
       "      <td>-58.3656</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2930</th>\n",
       "      <td>101</td>\n",
       "      <td>37.68</td>\n",
       "      <td>light</td>\n",
       "      <td>1.0</td>\n",
       "      <td>lying</td>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.29090</td>\n",
       "      <td>7.14240</td>\n",
       "      <td>...</td>\n",
       "      <td>30.75</td>\n",
       "      <td>9.69633</td>\n",
       "      <td>-1.92203</td>\n",
       "      <td>-0.059173</td>\n",
       "      <td>-0.035392</td>\n",
       "      <td>-0.052422</td>\n",
       "      <td>-0.004882</td>\n",
       "      <td>-60.3407</td>\n",
       "      <td>-35.7842</td>\n",
       "      <td>-58.6119</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2931</th>\n",
       "      <td>101</td>\n",
       "      <td>37.69</td>\n",
       "      <td>light</td>\n",
       "      <td>1.0</td>\n",
       "      <td>lying</td>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.21800</td>\n",
       "      <td>7.14365</td>\n",
       "      <td>...</td>\n",
       "      <td>30.75</td>\n",
       "      <td>9.66370</td>\n",
       "      <td>-1.84714</td>\n",
       "      <td>0.094385</td>\n",
       "      <td>-0.032514</td>\n",
       "      <td>-0.018844</td>\n",
       "      <td>0.026950</td>\n",
       "      <td>-60.7646</td>\n",
       "      <td>-37.1028</td>\n",
       "      <td>-57.8799</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2932</th>\n",
       "      <td>101</td>\n",
       "      <td>37.70</td>\n",
       "      <td>light</td>\n",
       "      <td>1.0</td>\n",
       "      <td>lying</td>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.30106</td>\n",
       "      <td>7.25857</td>\n",
       "      <td>...</td>\n",
       "      <td>30.75</td>\n",
       "      <td>9.77578</td>\n",
       "      <td>-1.88582</td>\n",
       "      <td>0.095775</td>\n",
       "      <td>0.001351</td>\n",
       "      <td>-0.048878</td>\n",
       "      <td>-0.006328</td>\n",
       "      <td>-60.2040</td>\n",
       "      <td>-37.1225</td>\n",
       "      <td>-57.8847</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 37 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Subject_ID  timestamp (seconds) activity_level  METs activity_mapped  \\\n",
       "2928        101                37.66          light   1.0           lying   \n",
       "2929        101                37.67          light   1.0           lying   \n",
       "2930        101                37.68          light   1.0           lying   \n",
       "2931        101                37.69          light   1.0           lying   \n",
       "2932        101                37.70          light   1.0           lying   \n",
       "\n",
       "     activity ID  heart rate (bpm)  hand - temperature  \\\n",
       "2928           1             100.0              30.375   \n",
       "2929           1             100.0              30.375   \n",
       "2930           1             100.0              30.375   \n",
       "2931           1             100.0              30.375   \n",
       "2932           1             100.0              30.375   \n",
       "\n",
       "      hand - 3D-acceleration scale: ±16g, resolution: 13-bit -1  \\\n",
       "2928                                            2.21530           \n",
       "2929                                            2.29196           \n",
       "2930                                            2.29090           \n",
       "2931                                            2.21800           \n",
       "2932                                            2.30106           \n",
       "\n",
       "      hand - 3D-acceleration scale: ±16g, resolution: 13-bit -2  ...  \\\n",
       "2928                                            8.27915          ...   \n",
       "2929                                            7.67288          ...   \n",
       "2930                                            7.14240          ...   \n",
       "2931                                            7.14365          ...   \n",
       "2932                                            7.25857          ...   \n",
       "\n",
       "      ankle - temperature  \\\n",
       "2928                30.75   \n",
       "2929                30.75   \n",
       "2930                30.75   \n",
       "2931                30.75   \n",
       "2932                30.75   \n",
       "\n",
       "      ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -1  \\\n",
       "2928                                            9.73855            \n",
       "2929                                            9.69762            \n",
       "2930                                            9.69633            \n",
       "2931                                            9.66370            \n",
       "2932                                            9.77578            \n",
       "\n",
       "      ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -2  \\\n",
       "2928                                           -1.84761            \n",
       "2929                                           -1.88438            \n",
       "2930                                           -1.92203            \n",
       "2931                                           -1.84714            \n",
       "2932                                           -1.88582            \n",
       "\n",
       "      ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -3  \\\n",
       "2928                                           0.095156            \n",
       "2929                                          -0.020804            \n",
       "2930                                          -0.059173            \n",
       "2931                                           0.094385            \n",
       "2932                                           0.095775            \n",
       "\n",
       "      ankle - 3D-gyroscope -1  ankle - 3D-gyroscope -2  \\\n",
       "2928                 0.002908                -0.027714   \n",
       "2929                 0.020882                 0.000945   \n",
       "2930                -0.035392                -0.052422   \n",
       "2931                -0.032514                -0.018844   \n",
       "2932                 0.001351                -0.048878   \n",
       "\n",
       "      ankle - 3D-gyroscope -3  ankle - 3D-magnetometer -1  \\\n",
       "2928                 0.001752                    -61.1081   \n",
       "2929                 0.006007                    -60.8916   \n",
       "2930                -0.004882                    -60.3407   \n",
       "2931                 0.026950                    -60.7646   \n",
       "2932                -0.006328                    -60.2040   \n",
       "\n",
       "      ankle - 3D-magnetometer -2  ankle - 3D-magnetometer -3  \n",
       "2928                    -36.8636                    -58.3696  \n",
       "2929                    -36.3197                    -58.3656  \n",
       "2930                    -35.7842                    -58.6119  \n",
       "2931                    -37.1028                    -57.8799  \n",
       "2932                    -37.1225                    -57.8847  \n",
       "\n",
       "[5 rows x 37 columns]"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Define METs cutoffs for intensity classification\n",
    "cutoff_light = 3.0\n",
    "cutoff_moderate = 6.0\n",
    "\n",
    "# Extract activities based on METs cutoffs\n",
    "light = list(itertools.chain.from_iterable(df_final.loc[df_final['METs'] < cutoff_light, [\"activity ID\"]].values.tolist()))\n",
    "moderate = list(itertools.chain.from_iterable(df_final.loc[(df_final['METs'] >= cutoff_light) & (df_final['METs'] <= cutoff_moderate), [\"activity ID\"]].values.tolist()))\n",
    "vigorous = list(itertools.chain.from_iterable(df_final.loc[df_final['METs'] > cutoff_moderate, [\"activity ID\"]].values.tolist()))\n",
    "\n",
    "# Add 'intensity_classification' column to the df_final dataframe\n",
    "df_final.insert(loc=2, column='activity_level', value=['light' if x < cutoff_light else 'moderate' if cutoff_light <= x <= cutoff_moderate else 'vigorous' for x in df_final['METs']])\n",
    "df_final.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "4ff5e27c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['light', 'moderate', 'vigorous'], dtype=object)"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.unique(df_final.activity_level)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "1f277096",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Subject_ID</th>\n",
       "      <th>timestamp (seconds)</th>\n",
       "      <th>METs</th>\n",
       "      <th>activity_mapped</th>\n",
       "      <th>activity ID</th>\n",
       "      <th>heart rate (bpm)</th>\n",
       "      <th>hand - temperature</th>\n",
       "      <th>hand - 3D-acceleration scale: ±16g, resolution: 13-bit -1</th>\n",
       "      <th>hand - 3D-acceleration scale: ±16g, resolution: 13-bit -2</th>\n",
       "      <th>hand - 3D-acceleration scale: ±16g, resolution: 13-bit -3</th>\n",
       "      <th>...</th>\n",
       "      <th>ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -3</th>\n",
       "      <th>ankle - 3D-gyroscope -1</th>\n",
       "      <th>ankle - 3D-gyroscope -2</th>\n",
       "      <th>ankle - 3D-gyroscope -3</th>\n",
       "      <th>ankle - 3D-magnetometer -1</th>\n",
       "      <th>ankle - 3D-magnetometer -2</th>\n",
       "      <th>ankle - 3D-magnetometer -3</th>\n",
       "      <th>activity_level_light</th>\n",
       "      <th>activity_level_moderate</th>\n",
       "      <th>activity_level_vigorous</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2928</th>\n",
       "      <td>101</td>\n",
       "      <td>37.66</td>\n",
       "      <td>1.0</td>\n",
       "      <td>lying</td>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.21530</td>\n",
       "      <td>8.27915</td>\n",
       "      <td>5.58753</td>\n",
       "      <td>...</td>\n",
       "      <td>0.095156</td>\n",
       "      <td>0.002908</td>\n",
       "      <td>-0.027714</td>\n",
       "      <td>0.001752</td>\n",
       "      <td>-61.1081</td>\n",
       "      <td>-36.8636</td>\n",
       "      <td>-58.3696</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2929</th>\n",
       "      <td>101</td>\n",
       "      <td>37.67</td>\n",
       "      <td>1.0</td>\n",
       "      <td>lying</td>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.29196</td>\n",
       "      <td>7.67288</td>\n",
       "      <td>5.74467</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.020804</td>\n",
       "      <td>0.020882</td>\n",
       "      <td>0.000945</td>\n",
       "      <td>0.006007</td>\n",
       "      <td>-60.8916</td>\n",
       "      <td>-36.3197</td>\n",
       "      <td>-58.3656</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2930</th>\n",
       "      <td>101</td>\n",
       "      <td>37.68</td>\n",
       "      <td>1.0</td>\n",
       "      <td>lying</td>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.29090</td>\n",
       "      <td>7.14240</td>\n",
       "      <td>5.82342</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.059173</td>\n",
       "      <td>-0.035392</td>\n",
       "      <td>-0.052422</td>\n",
       "      <td>-0.004882</td>\n",
       "      <td>-60.3407</td>\n",
       "      <td>-35.7842</td>\n",
       "      <td>-58.6119</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2931</th>\n",
       "      <td>101</td>\n",
       "      <td>37.69</td>\n",
       "      <td>1.0</td>\n",
       "      <td>lying</td>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.21800</td>\n",
       "      <td>7.14365</td>\n",
       "      <td>5.89930</td>\n",
       "      <td>...</td>\n",
       "      <td>0.094385</td>\n",
       "      <td>-0.032514</td>\n",
       "      <td>-0.018844</td>\n",
       "      <td>0.026950</td>\n",
       "      <td>-60.7646</td>\n",
       "      <td>-37.1028</td>\n",
       "      <td>-57.8799</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2932</th>\n",
       "      <td>101</td>\n",
       "      <td>37.70</td>\n",
       "      <td>1.0</td>\n",
       "      <td>lying</td>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.30106</td>\n",
       "      <td>7.25857</td>\n",
       "      <td>6.09259</td>\n",
       "      <td>...</td>\n",
       "      <td>0.095775</td>\n",
       "      <td>0.001351</td>\n",
       "      <td>-0.048878</td>\n",
       "      <td>-0.006328</td>\n",
       "      <td>-60.2040</td>\n",
       "      <td>-37.1225</td>\n",
       "      <td>-57.8847</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 39 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Subject_ID  timestamp (seconds)  METs activity_mapped activity ID  \\\n",
       "2928        101                37.66   1.0           lying           1   \n",
       "2929        101                37.67   1.0           lying           1   \n",
       "2930        101                37.68   1.0           lying           1   \n",
       "2931        101                37.69   1.0           lying           1   \n",
       "2932        101                37.70   1.0           lying           1   \n",
       "\n",
       "      heart rate (bpm)  hand - temperature  \\\n",
       "2928             100.0              30.375   \n",
       "2929             100.0              30.375   \n",
       "2930             100.0              30.375   \n",
       "2931             100.0              30.375   \n",
       "2932             100.0              30.375   \n",
       "\n",
       "      hand - 3D-acceleration scale: ±16g, resolution: 13-bit -1  \\\n",
       "2928                                            2.21530           \n",
       "2929                                            2.29196           \n",
       "2930                                            2.29090           \n",
       "2931                                            2.21800           \n",
       "2932                                            2.30106           \n",
       "\n",
       "      hand - 3D-acceleration scale: ±16g, resolution: 13-bit -2  \\\n",
       "2928                                            8.27915           \n",
       "2929                                            7.67288           \n",
       "2930                                            7.14240           \n",
       "2931                                            7.14365           \n",
       "2932                                            7.25857           \n",
       "\n",
       "      hand - 3D-acceleration scale: ±16g, resolution: 13-bit -3  ...  \\\n",
       "2928                                            5.58753          ...   \n",
       "2929                                            5.74467          ...   \n",
       "2930                                            5.82342          ...   \n",
       "2931                                            5.89930          ...   \n",
       "2932                                            6.09259          ...   \n",
       "\n",
       "      ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -3  \\\n",
       "2928                                           0.095156            \n",
       "2929                                          -0.020804            \n",
       "2930                                          -0.059173            \n",
       "2931                                           0.094385            \n",
       "2932                                           0.095775            \n",
       "\n",
       "      ankle - 3D-gyroscope -1  ankle - 3D-gyroscope -2  \\\n",
       "2928                 0.002908                -0.027714   \n",
       "2929                 0.020882                 0.000945   \n",
       "2930                -0.035392                -0.052422   \n",
       "2931                -0.032514                -0.018844   \n",
       "2932                 0.001351                -0.048878   \n",
       "\n",
       "      ankle - 3D-gyroscope -3  ankle - 3D-magnetometer -1  \\\n",
       "2928                 0.001752                    -61.1081   \n",
       "2929                 0.006007                    -60.8916   \n",
       "2930                -0.004882                    -60.3407   \n",
       "2931                 0.026950                    -60.7646   \n",
       "2932                -0.006328                    -60.2040   \n",
       "\n",
       "      ankle - 3D-magnetometer -2  ankle - 3D-magnetometer -3  \\\n",
       "2928                    -36.8636                    -58.3696   \n",
       "2929                    -36.3197                    -58.3656   \n",
       "2930                    -35.7842                    -58.6119   \n",
       "2931                    -37.1028                    -57.8799   \n",
       "2932                    -37.1225                    -57.8847   \n",
       "\n",
       "      activity_level_light  activity_level_moderate  activity_level_vigorous  \n",
       "2928                   1.0                      0.0                      0.0  \n",
       "2929                   1.0                      0.0                      0.0  \n",
       "2930                   1.0                      0.0                      0.0  \n",
       "2931                   1.0                      0.0                      0.0  \n",
       "2932                   1.0                      0.0                      0.0  \n",
       "\n",
       "[5 rows x 39 columns]"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#One-hot encoding\n",
    "\n",
    "categoric_cols = [\"activity_level\"]\n",
    "df = pd.get_dummies(df_final,columns=categoric_cols,dtype=float)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "ff100ebc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "activity_level_light\n",
      "0.0    1117609\n",
      "1.0     803821\n",
      "Name: count, dtype: int64\n",
      "activity_level_moderate\n",
      "0.0    1064134\n",
      "1.0     857296\n",
      "Name: count, dtype: int64\n",
      "activity_level_vigorous\n",
      "0.0    1661117\n",
      "1.0     260313\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(df[\"activity_level_light\"].value_counts())\n",
    "print(df[\"activity_level_moderate\"].value_counts())\n",
    "print(df[\"activity_level_vigorous\"].value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "9d159a8f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Subject_ID</th>\n",
       "      <th>timestamp (seconds)</th>\n",
       "      <th>METs</th>\n",
       "      <th>activity ID</th>\n",
       "      <th>heart rate (bpm)</th>\n",
       "      <th>hand - temperature</th>\n",
       "      <th>hand - 3D-acceleration scale: ±16g, resolution: 13-bit -1</th>\n",
       "      <th>hand - 3D-acceleration scale: ±16g, resolution: 13-bit -2</th>\n",
       "      <th>hand - 3D-acceleration scale: ±16g, resolution: 13-bit -3</th>\n",
       "      <th>hand - 3D-gyroscope -1</th>\n",
       "      <th>...</th>\n",
       "      <th>ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -3</th>\n",
       "      <th>ankle - 3D-gyroscope -1</th>\n",
       "      <th>ankle - 3D-gyroscope -2</th>\n",
       "      <th>ankle - 3D-gyroscope -3</th>\n",
       "      <th>ankle - 3D-magnetometer -1</th>\n",
       "      <th>ankle - 3D-magnetometer -2</th>\n",
       "      <th>ankle - 3D-magnetometer -3</th>\n",
       "      <th>activity_level_light</th>\n",
       "      <th>activity_level_moderate</th>\n",
       "      <th>activity_level_vigorous</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2928</th>\n",
       "      <td>101</td>\n",
       "      <td>37.66</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.21530</td>\n",
       "      <td>8.27915</td>\n",
       "      <td>5.58753</td>\n",
       "      <td>-0.004750</td>\n",
       "      <td>...</td>\n",
       "      <td>0.095156</td>\n",
       "      <td>0.002908</td>\n",
       "      <td>-0.027714</td>\n",
       "      <td>0.001752</td>\n",
       "      <td>-61.1081</td>\n",
       "      <td>-36.8636</td>\n",
       "      <td>-58.3696</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2929</th>\n",
       "      <td>101</td>\n",
       "      <td>37.67</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.29196</td>\n",
       "      <td>7.67288</td>\n",
       "      <td>5.74467</td>\n",
       "      <td>-0.171710</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.020804</td>\n",
       "      <td>0.020882</td>\n",
       "      <td>0.000945</td>\n",
       "      <td>0.006007</td>\n",
       "      <td>-60.8916</td>\n",
       "      <td>-36.3197</td>\n",
       "      <td>-58.3656</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2930</th>\n",
       "      <td>101</td>\n",
       "      <td>37.68</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.29090</td>\n",
       "      <td>7.14240</td>\n",
       "      <td>5.82342</td>\n",
       "      <td>-0.238241</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.059173</td>\n",
       "      <td>-0.035392</td>\n",
       "      <td>-0.052422</td>\n",
       "      <td>-0.004882</td>\n",
       "      <td>-60.3407</td>\n",
       "      <td>-35.7842</td>\n",
       "      <td>-58.6119</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2931</th>\n",
       "      <td>101</td>\n",
       "      <td>37.69</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.21800</td>\n",
       "      <td>7.14365</td>\n",
       "      <td>5.89930</td>\n",
       "      <td>-0.192912</td>\n",
       "      <td>...</td>\n",
       "      <td>0.094385</td>\n",
       "      <td>-0.032514</td>\n",
       "      <td>-0.018844</td>\n",
       "      <td>0.026950</td>\n",
       "      <td>-60.7646</td>\n",
       "      <td>-37.1028</td>\n",
       "      <td>-57.8799</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2932</th>\n",
       "      <td>101</td>\n",
       "      <td>37.70</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>30.375</td>\n",
       "      <td>2.30106</td>\n",
       "      <td>7.25857</td>\n",
       "      <td>6.09259</td>\n",
       "      <td>-0.069961</td>\n",
       "      <td>...</td>\n",
       "      <td>0.095775</td>\n",
       "      <td>0.001351</td>\n",
       "      <td>-0.048878</td>\n",
       "      <td>-0.006328</td>\n",
       "      <td>-60.2040</td>\n",
       "      <td>-37.1225</td>\n",
       "      <td>-57.8847</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 38 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Subject_ID  timestamp (seconds)  METs activity ID  heart rate (bpm)  \\\n",
       "2928        101                37.66   1.0           1             100.0   \n",
       "2929        101                37.67   1.0           1             100.0   \n",
       "2930        101                37.68   1.0           1             100.0   \n",
       "2931        101                37.69   1.0           1             100.0   \n",
       "2932        101                37.70   1.0           1             100.0   \n",
       "\n",
       "      hand - temperature  \\\n",
       "2928              30.375   \n",
       "2929              30.375   \n",
       "2930              30.375   \n",
       "2931              30.375   \n",
       "2932              30.375   \n",
       "\n",
       "      hand - 3D-acceleration scale: ±16g, resolution: 13-bit -1  \\\n",
       "2928                                            2.21530           \n",
       "2929                                            2.29196           \n",
       "2930                                            2.29090           \n",
       "2931                                            2.21800           \n",
       "2932                                            2.30106           \n",
       "\n",
       "      hand - 3D-acceleration scale: ±16g, resolution: 13-bit -2  \\\n",
       "2928                                            8.27915           \n",
       "2929                                            7.67288           \n",
       "2930                                            7.14240           \n",
       "2931                                            7.14365           \n",
       "2932                                            7.25857           \n",
       "\n",
       "      hand - 3D-acceleration scale: ±16g, resolution: 13-bit -3  \\\n",
       "2928                                            5.58753           \n",
       "2929                                            5.74467           \n",
       "2930                                            5.82342           \n",
       "2931                                            5.89930           \n",
       "2932                                            6.09259           \n",
       "\n",
       "      hand - 3D-gyroscope -1  ...  \\\n",
       "2928               -0.004750  ...   \n",
       "2929               -0.171710  ...   \n",
       "2930               -0.238241  ...   \n",
       "2931               -0.192912  ...   \n",
       "2932               -0.069961  ...   \n",
       "\n",
       "      ankle - 3D-acceleration scale: ±16g, resolution: 13-bit -3  \\\n",
       "2928                                           0.095156            \n",
       "2929                                          -0.020804            \n",
       "2930                                          -0.059173            \n",
       "2931                                           0.094385            \n",
       "2932                                           0.095775            \n",
       "\n",
       "      ankle - 3D-gyroscope -1  ankle - 3D-gyroscope -2  \\\n",
       "2928                 0.002908                -0.027714   \n",
       "2929                 0.020882                 0.000945   \n",
       "2930                -0.035392                -0.052422   \n",
       "2931                -0.032514                -0.018844   \n",
       "2932                 0.001351                -0.048878   \n",
       "\n",
       "      ankle - 3D-gyroscope -3  ankle - 3D-magnetometer -1  \\\n",
       "2928                 0.001752                    -61.1081   \n",
       "2929                 0.006007                    -60.8916   \n",
       "2930                -0.004882                    -60.3407   \n",
       "2931                 0.026950                    -60.7646   \n",
       "2932                -0.006328                    -60.2040   \n",
       "\n",
       "      ankle - 3D-magnetometer -2  ankle - 3D-magnetometer -3  \\\n",
       "2928                    -36.8636                    -58.3696   \n",
       "2929                    -36.3197                    -58.3656   \n",
       "2930                    -35.7842                    -58.6119   \n",
       "2931                    -37.1028                    -57.8799   \n",
       "2932                    -37.1225                    -57.8847   \n",
       "\n",
       "      activity_level_light  activity_level_moderate  activity_level_vigorous  \n",
       "2928                   1.0                      0.0                      0.0  \n",
       "2929                   1.0                      0.0                      0.0  \n",
       "2930                   1.0                      0.0                      0.0  \n",
       "2931                   1.0                      0.0                      0.0  \n",
       "2932                   1.0                      0.0                      0.0  \n",
       "\n",
       "[5 rows x 38 columns]"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#droping non-numeric columns\n",
    "activity_mapped = 'activity_mapped'\n",
    "\n",
    "# Drop the non-numeric column\n",
    "df2 = df.drop(columns=[activity_mapped])\n",
    "df2.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "871deb14",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f6e7b624",
   "metadata": {},
   "source": [
    "\n",
    "# Feature Selection\n",
    "\n",
    "- Rationale for model Feature\n",
    "\n",
    "This is section implement PCA for feature selection so as to avoid using features that is irrelevant for our EDA and Modelling. \n",
    "\n",
    "Based on the feature selection using PCA, I will be working with features from PC1 to PC3 for prediction model and resampling dataset, so as to have a smaller dataset size for good performance.\n",
    "\n",
    "Selected Columns:\n",
    "\"timestamp (seconds)\",\"heart rate (bpm)\", \"METs\",  \"activity_level_light\", \"activity_level_moderate\", \"activity_level_vigorous\", \"hand - temperature\", \"chest - temperature\", \"ankle - temperature\"]\n",
    "\n",
    "Reason for resampling: #After reclassification, hot encoding, cleaning, and organising, the final dataset has 1,921,430 rows by 39 columns.Resampling the dataset(100,000) will help fast and effective performance of the model because the current dataset is a too large and could slow down modelling processing.\n",
    "\n",
    "I have asked Chatgpt to help with printing out top features from the PC1 to PC6 code.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "3bf636ef",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Step 1: Standardize the data (mean=0 and variance=1)\n",
    "scaler = StandardScaler()\n",
    "scaled_data = scaler.fit_transform(df2)\n",
    "\n",
    "# Step 2: Apply PCA\n",
    "pca = PCA()\n",
    "pca_result = pca.fit_transform(scaled_data)\n",
    "\n",
    "# Step 3: Calculate explained variance ratio and cumulative explained variance\n",
    "explained_variance_ratio = pca.explained_variance_ratio_\n",
    "cumulative_explained_variance = explained_variance_ratio.cumsum()\n",
    "\n",
    "# Step 4: Determine the number of principal components to retain\n",
    "# plot the cumulative explained variance to visually inspect the elbow point\n",
    "plt.plot(range(1, len(cumulative_explained_variance) + 1), cumulative_explained_variance, marker='o')\n",
    "plt.xlabel('Number of Principal Components')\n",
    "plt.ylabel('Cumulative Explained Variance')\n",
    "plt.title('Cumulative Explained Variance vs. Number of Principal Components')\n",
    "plt.show()\n",
    "\n",
    "# Step 5: Retain the selected number of principal components\n",
    "num_components_to_retain = 6 \n",
    "pca_result_selected = pca_result[:, :num_components_to_retain]\n",
    "\n",
    "# Step 6: Create a DataFrame with the selected principal components\n",
    "pca_columns = [f'PC{i+1}' for i in range(num_components_to_retain)]\n",
    "df_pca_final = pd.DataFrame(data=pca_result_selected, columns=pca_columns)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "7716fa98",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Top features for PC1:\n",
      "  timestamp (seconds)\n",
      "  activity_level_light\n",
      "  heart rate (bpm)\n",
      "  METs\n",
      "  chest - 3D-acceleration scale: ±16g, resolution: 13-bit -3\n",
      "\n",
      "Top features for PC2:\n",
      "  hand - temperature\n",
      "  chest - temperature\n",
      "  ankle - temperature\n",
      "  ankle - 3D-magnetometer -3\n",
      "  chest - 3D-magnetometer -1\n",
      "\n",
      "Top features for PC3:\n",
      "  activity_level_moderate\n",
      "  activity_level_vigorous\n",
      "  chest - temperature\n",
      "  hand - 3D-magnetometer -2\n",
      "  hand - 3D-magnetometer -1\n",
      "\n",
      "Top features for PC4:\n",
      "  chest - 3D-gyroscope -2\n",
      "  hand - 3D-gyroscope -1\n",
      "  chest - 3D-gyroscope -3\n",
      "  hand - 3D-gyroscope -3\n",
      "  hand - 3D-gyroscope -2\n",
      "\n",
      "Top features for PC5:\n",
      "  hand - 3D-magnetometer -3\n",
      "  hand - 3D-acceleration scale: ±16g, resolution: 13-bit -3\n",
      "  ankle - 3D-magnetometer -1\n",
      "  Subject_ID\n",
      "  chest - 3D-acceleration scale: ±16g, resolution: 13-bit -1\n",
      "\n",
      "Top features for PC6:\n",
      "  ankle - 3D-gyroscope -1\n",
      "  hand - 3D-magnetometer -3\n",
      "  ankle - 3D-gyroscope -3\n",
      "  ankle - 3D-magnetometer -2\n",
      "  activity ID\n"
     ]
    }
   ],
   "source": [
    "# Assuming num_components_to_retain is the chosen number of components\n",
    "pca_result_selected = pca_result[:, :num_components_to_retain]\n",
    "\n",
    "# Create a DataFrame with the selected principal components\n",
    "pca_columns = [f'PC{i+1}' for i in range(num_components_to_retain)]\n",
    "df_pca_final = pd.DataFrame(data=pca_result_selected, columns=pca_columns)\n",
    "\n",
    "# Display the corresponding feature names for each principal component\n",
    "for i, pc_column in enumerate(pca_columns):\n",
    "    top_features_idx = abs(pca.components_[i]).argsort()[::-1][:5]  # Display top 5 features\n",
    "    top_features = df2.columns[top_features_idx]\n",
    "    \n",
    "    print(f\"\\nTop features for {pc_column}:\")\n",
    "    for feature in top_features:\n",
    "        print(f\"  {feature}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "103187e4",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>timestamp (seconds)</th>\n",
       "      <th>heart rate (bpm)</th>\n",
       "      <th>METs</th>\n",
       "      <th>activity_level_light</th>\n",
       "      <th>activity_level_moderate</th>\n",
       "      <th>activity_level_vigorous</th>\n",
       "      <th>hand - temperature</th>\n",
       "      <th>chest - temperature</th>\n",
       "      <th>ankle - temperature</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>134700</th>\n",
       "      <td>1355.38</td>\n",
       "      <td>133.0</td>\n",
       "      <td>3.50</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>33.6875</td>\n",
       "      <td>35.6875</td>\n",
       "      <td>34.6250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>942462</th>\n",
       "      <td>1196.09</td>\n",
       "      <td>85.0</td>\n",
       "      <td>2.30</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>32.9375</td>\n",
       "      <td>36.3125</td>\n",
       "      <td>33.8750</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1428281</th>\n",
       "      <td>230.25</td>\n",
       "      <td>72.0</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>34.8125</td>\n",
       "      <td>36.5625</td>\n",
       "      <td>34.1250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2839901</th>\n",
       "      <td>3844.65</td>\n",
       "      <td>189.0</td>\n",
       "      <td>9.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>30.8125</td>\n",
       "      <td>34.1250</td>\n",
       "      <td>31.6875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1052504</th>\n",
       "      <td>2296.51</td>\n",
       "      <td>120.0</td>\n",
       "      <td>3.55</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>30.1250</td>\n",
       "      <td>37.0000</td>\n",
       "      <td>34.6250</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         timestamp (seconds)  heart rate (bpm)  METs  activity_level_light  \\\n",
       "134700               1355.38             133.0  3.50                   0.0   \n",
       "942462               1196.09              85.0  2.30                   1.0   \n",
       "1428281               230.25              72.0  1.00                   1.0   \n",
       "2839901              3844.65             189.0  9.00                   0.0   \n",
       "1052504              2296.51             120.0  3.55                   0.0   \n",
       "\n",
       "         activity_level_moderate  activity_level_vigorous  hand - temperature  \\\n",
       "134700                       1.0                      0.0             33.6875   \n",
       "942462                       0.0                      0.0             32.9375   \n",
       "1428281                      0.0                      0.0             34.8125   \n",
       "2839901                      0.0                      1.0             30.8125   \n",
       "1052504                      1.0                      0.0             30.1250   \n",
       "\n",
       "         chest - temperature  ankle - temperature  \n",
       "134700               35.6875              34.6250  \n",
       "942462               36.3125              33.8750  \n",
       "1428281              36.5625              34.1250  \n",
       "2839901              34.1250              31.6875  \n",
       "1052504              37.0000              34.6250  "
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# store the selected columns in a new dataframe (df_model)\n",
    "selected_columns = [\"timestamp (seconds)\",\"heart rate (bpm)\", \"METs\", \"activity_level_light\", \"activity_level_moderate\", \"activity_level_vigorous\", \"hand - temperature\", \"chest - temperature\", \"ankle - temperature\"]\n",
    "df_model = df2[selected_columns]\n",
    "\n",
    "# resampling the original dataset\n",
    "sample_size = 100000  # Adjust the size as needed\n",
    "df_sample = df_model.sample(n=sample_size, random_state=42)\n",
    "df_model = df_sample\n",
    "\n",
    "# Display the resulting DataFrame\n",
    "df_model.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6b800515",
   "metadata": {},
   "source": [
    "# Exploratory Data Analysis(EDA)\n",
    "\n",
    "This phase will involve a visualisation of the cleaned dataset(df_final)by summarizing their main characteristics, using stacked histogram, boxplot,scatterplot etc to gain insight into the most relevant elements/features that will guide the formulation of hypotheses and mathematical models.\n",
    "\n",
    "And given that the dataset pertains to the tracking and monitoring of various physical activities performed by participants and the sensor utilised, the selected dataset parameter will serve as a helpful indicator for our analysis and modelling with the following assumption.\n",
    "\n",
    "- Subject_ID (object): This variable represents the unique identifier for each individual. It could be useful for tracking individual performance over time or for identifying patterns related to specific activity or intensity of the difference physical activity.\n",
    "\n",
    "- Timestamps:when recording individual activity- this parameter indicates when the activity occured and the durations and frequencies of the all activities carred out by the individual; making the parameter helpful in assessing the length of the exercise .\n",
    "\n",
    "- METs (Metabolic Equivalent of Task): determine the validity of energy expenditure during each physical activity will be crucial for individuals with health goals such as weight and body fat reduction, and overall health—data insight from this data parameter distinguished between low, moderate and hight intensifying exercise.\n",
    "\n",
    "- heart rate(bpm): Heart rate is a fundamental indicator of cardiovascular fitness. Analyzing heart rate data can provide insights into the intensity of exercises and recovery periods which will make it a great parameter to consider.\n",
    "\n",
    "- Temperature: Hand, chest, and ankle temperature data can be used to study the impact of body temperature on performance and recovery even the level of adaptability in an environment\n",
    "\n",
    "Rationale for the selected Features:\n",
    "\n",
    "- Tracking temperature during physical exercise could be as it Identifying Overtraining or Fatigue: Elevated body temperature, particularly when combined with other physiological markers(heart rate, METs), may indicate overtraining or fatigue. Continuous monitoring can help prevent injuries and optimize training loads to avoid burnout.\n",
    "\n",
    "- Environmental Adaptation: Monitoring temperature can provide insights into how individuals adapt to various environmental conditions for outdoor activities. This information can be useful for athletes who train or compete in different climates.\n",
    "\n",
    "\n",
    "\n",
    "Hence, for this justification and reason why people will be interested in tracking their physical activity; I will be focusing on parameter as follows:\n",
    " \n",
    " - Activity ID classification(Light,Moderate and Vigorous)\n",
    " - Heart Rate\n",
    " - METs\n",
    " - Temperature\n",
    " \n",
    " \n",
    "These selected Parameters has been shown to have positive correlation; which mean a meaningful insight and assumption could be generated from them if consider for EDA and model.\n",
    " \n",
    " \n",
    " After which I will be assessing how accurately the sensor device measure the impact of the physical activity and what the METs record tells us about the data collected.\n",
    " \n",
    "My model will answer how accuretely the sensor measure the variable that could tell the intensify of the kindy of activities \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "c478444e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Aggregated the selected columns for visual\n",
    "aggre_data = df_final.groupby([\"Subject_ID\", 'activity_mapped']).agg({'timestamp (seconds)': 'count'}).reset_index()\n",
    "\n",
    "# Pivot the aggregated dataframe \n",
    "pivoted_aggre_data = aggre_data.pivot(index='Subject_ID', columns='activity_mapped', values='timestamp (seconds)')\n",
    "pivoted_aggre_data\n",
    "\n",
    "#Plotting a stacked bar plot (histogram) \n",
    "\n",
    "# Define a custom color palette\n",
    "custom_palette = {\n",
    "    \"Nordic walking\": '#4B0082',  # Indigo\n",
    "    \"ascending stairs\": '#FF8C00',  # dark orange\n",
    "    \"cycling\": '#2ca02c',  # green\n",
    "    \"descending stairs\": '#d62728',  # red\n",
    "    \"ironing\": '#9467bd',  # purple\n",
    "    \"lying\": '#8c564b',  # brown\n",
    "    \"rope jumping\": '#000000',  # black\n",
    "    \"running\": '#7f7f7f',  # gray\n",
    "    \"sitting\": '#bcbd22',  # olive\n",
    "    \"standing\": '#17becf',  # cyan\n",
    "    \"vacuum cleaning\": '#1f78b4',  # dark blue\n",
    "    \"walking\": '#B8860B'  # dark gold\n",
    "}\n",
    "\n",
    "# Plot the stacked bar plot with the custom color palette\n",
    "ax = pivoted_aggre_data.plot(kind='bar', stacked=True, figsize=(10, 5), color=[custom_palette[col] for col in pivoted_aggre_data.columns])\n",
    "\n",
    "# Format the y-axis labels and Set ylabel and title\n",
    "ax.yaxis.set_major_formatter('{x:,.0f}')\n",
    "ax.set_ylabel(\"No. of time stamps\")\n",
    "\n",
    "plt.title(\"Chart 1: Subjects'Physical Activity by Number of Time Stamps\")\n",
    "\n",
    "# Display the legend\n",
    "plt.legend(bbox_to_anchor=(1, 1))\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "098a2a9e",
   "metadata": {},
   "source": [
    "The above visual(Chart 1) shows each participant's number of times stamp for each activity. From the chart,  Subjects 101, 102, 105, 106, and 108 recorded the most carried-out activity compared to Subject 109, which stands out as having only one recording (Rope Jumping); this may be the individual the data collector referred to as having their data collection discontinued.\n",
    "\n",
    "Also, certain subjects, such as 103, have no readings for walking, cycling, rope jumping, and running activities. Subject 104 has no readings for rope jumping."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "5070eb84",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1600x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Plotting Scatter plots \n",
    "\n",
    "# Create a figure with two subplots\n",
    "fig, (ax1, ax2) = plt.subplots(nrows=1, ncols=2, figsize=(16, 6))\n",
    "\n",
    "# Scatter plot for heart rate\n",
    "ax1.scatter(df[\"activity_mapped\"], df[\"heart rate (bpm)\"], label=\"Heart Rate\", alpha=0.7)\n",
    "ax1.set_xlabel(\"Activity Mapped\")\n",
    "ax1.set_ylabel(\"Heart Rate (bpm)\")\n",
    "ax1.set_title(\"CHART 2.1: Scatter Plot Activity vs Heart Rate\")\n",
    "\n",
    "# Rotate x-axis label\n",
    "ax1.tick_params(axis='x', rotation=45)\n",
    "ax1.legend()\n",
    "\n",
    "# Scatter plot for METs\n",
    "ax2.scatter(df[\"activity_mapped\"], df[\"METs\"], label=\"METs\", alpha=0.7)\n",
    "ax2.set_xlabel(\"Activity Mapped\")\n",
    "ax2.set_ylabel(\"METs\")\n",
    "ax2.set_title(\"CHART 2.2: Scatter Plot of Activity vs METs\")\n",
    "ax2.tick_params(axis='x', rotation=45)\n",
    "ax2.legend()\n",
    "\n",
    "# Adjust layout to prevent overlapping titles\n",
    "plt.tight_layout()\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "428fc7a4",
   "metadata": {},
   "source": [
    "The scatter plots visualize the relationship between different physical activities (mapped to the x-axis) and two different variable(Heart rate and METs)\n",
    "\n",
    " - Chart 2.1: The information from the chart indicates that physical activity, such as ascending and descending stairs, running, and rope jumping are associated with a high heart rate; this is also true for the METs in Chart 2.2, which shows a positive relationship with the activity as they become intense. Both heart rate and MET values could measure the intensity of physical activity."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "9d97fb99",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1600x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Create a figure with two subplots\n",
    "fig, (ax3, ax4) = plt.subplots(nrows=1, ncols=2, figsize=(16, 6))\n",
    "\n",
    "# Boxplot: Heart Rate distribution by Activity ID\n",
    "sns.boxplot(x='activity_mapped', y='heart rate (bpm)', data=df, ax=ax3)\n",
    "ax3.set_title('Chart 3.1: Boxplot of Heart Rate by Activity ID')\n",
    "ax3.set_xlabel('Activity ID')\n",
    "ax3.set_ylabel('Heart Rate')\n",
    "\n",
    "# Rotate x-axis labels for better readability\n",
    "ax3.tick_params(axis='x', rotation=45)\n",
    "\n",
    "# Boxplot: Heart Rate distribution by Subject ID\n",
    "sns.boxplot(x='Subject_ID', y='heart rate (bpm)', data=df, ax=ax4)\n",
    "ax4.set_title('Chart 3.2: Boxplot of Heart Rate by Subject ID')\n",
    "ax4.set_xlabel('Subject ID')\n",
    "ax4.set_ylabel('Heart Rate')\n",
    "\n",
    "# Rotate x-axis labels for better readability\n",
    "ax4.tick_params(axis='x', rotation=45)\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "099f0767",
   "metadata": {},
   "source": [
    "Chart 3 presents the activity ID and subjects ID against the heart rate across all as a boxplot.\n",
    "\n",
    "Subject 109 stands out as an exception, with a very small range in heart rate. This is as expected; above we saw that this subject only participated in one activity (rope jumping). So the variation associated with participating in a wider range of activities is absent.\n",
    "\n",
    "Subject 103 has a noticeable positive skew, which may reflect the fact that he did not have any data for the the more strenuous activities."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5204e8f4",
   "metadata": {},
   "source": [
    "# MODEL"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "972b7a21",
   "metadata": {},
   "source": [
    "# Linear Regression Model\n",
    "\n",
    "I have chosen a Linear regression model because I am interested in assessing how accurately the mesurement/value of of physiological metrics tells how fit an individual is that is the level of physical activity they have undergo for fitness.\n",
    "\n",
    "In the model the feature for dependent variable will be the activity ID which has been classify into Light, moderate and virogous activities and the  physiological metric which will be the independent variables (heart rate, temperature, Mets). \n",
    "\n",
    "This model assumes a linear relationship between the independent and dependent variables and aims to estimate the coefficients that best fit the data. The independent variables are used to explain or predict the variation in the dependent variable.\n",
    "\n",
    "I performed feature selection using Sequential Feature Selector (SFS) with a linear regression model and evaluating the Akaike Information Criterion (AIC) for different numbers of features. The goal is to find the optimal number of features that minimizes the AIC, indicating a good trade-off between model complexity and fit."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "296a2ef2",
   "metadata": {},
   "source": [
    "# Linear Regression Model 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "29e4b414",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x12f1bf1d0>]"
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Dependent variable (METs) against Independent variable (Activity Level)\n",
    "\n",
    "resp = \"METs\"\n",
    "y = df_model[resp]\n",
    "X = df_model.copy(deep=True)\n",
    "X.drop(columns=[resp],inplace=True)\n",
    "\n",
    "AIC = np.zeros(len(X.columns))\n",
    "lm = LinearRegression()\n",
    "num_features = np.arange(1,len(df_model.columns))\n",
    "sfs_features = {nf : {} for nf in num_features[:-1]}\n",
    "\n",
    "for idx,nf in enumerate(num_features[:-1]):\n",
    "    sfs = SequentialFeatureSelector(lm,n_features_to_select=nf).fit(X,y)\n",
    "    features = sfs.get_feature_names_out()\n",
    "    new_X = X[features]\n",
    "    nf_lm = lm.fit(new_X,y)\n",
    "    score = nf_lm.score(new_X,y)\n",
    "    y_pred = nf_lm.predict(new_X)\n",
    "    mse = mean_squared_error(y,y_pred)\n",
    "    AIC[idx] = 2.0*nf + len(X) * np.log(2.0*np.pi*(mse ** 2.0)) + len(X)\n",
    "    sfs_features[nf] = {\"score\":score, \"features\": features, \"model\":nf_lm}\n",
    "    \n",
    "nf_lm = lm.fit(X,y)\n",
    "score = nf_lm.score(X,y)\n",
    "y_pred = nf_lm.predict(X)\n",
    "mse = mean_squared_error(y,y_pred)\n",
    "AIC[-1] = 2.0*num_features[-1] + len(X) * np.log(2.0*np.pi*(mse ** 2.0)) + len(X)\n",
    "\n",
    "aic_features = np.argmin(AIC) + 1\n",
    "fig, ax = plt.subplots(nrows=1,ncols=1)\n",
    "ax.set_xlabel(\"Number of features\")\n",
    "ax.set_ylabel(\"AIC\")\n",
    "ax.set_title(f\"Determine number of features: AIC, {aic_features} features\")\n",
    "ax.plot(num_features,AIC,ls=\"--\",lw=2,marker=\"x\",c=\"k\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "45b6e66a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>      <td>METs</td>    <th>  R-squared:         </th> <td>   0.926</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>               <td>OLS</td>    <th>  Adj. R-squared:    </th> <td>   0.926</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>  <td>100000</td>   <th>  F-statistic:       </th> <td>1.784e+05</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>  <td>nonrobust</td> <th>  Prob (F-statistic):</th>  <td>  0.00</td>  \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "             <td></td>                <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th>                   <td>    0.9315</td> <td>    0.065</td> <td>   14.248</td> <td> 0.000</td> <td>    0.803</td> <td>    1.060</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>timestamp (seconds)</th>     <td>    0.0005</td> <td> 3.56e-06</td> <td>  138.983</td> <td> 0.000</td> <td>    0.000</td> <td>    0.001</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>heart rate (bpm)</th>        <td>    0.0012</td> <td>    0.000</td> <td>    8.980</td> <td> 0.000</td> <td>    0.001</td> <td>    0.001</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>activity_level_light</th>    <td>   -1.1525</td> <td>    0.007</td> <td> -154.330</td> <td> 0.000</td> <td>   -1.167</td> <td>   -1.138</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>activity_level_vigorous</th> <td>    3.9364</td> <td>    0.007</td> <td>  585.567</td> <td> 0.000</td> <td>    3.923</td> <td>    3.950</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>hand - temperature</th>      <td>   -0.0825</td> <td>    0.002</td> <td>  -37.392</td> <td> 0.000</td> <td>   -0.087</td> <td>   -0.078</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>chest - temperature</th>     <td>    0.1320</td> <td>    0.003</td> <td>   51.415</td> <td> 0.000</td> <td>    0.127</td> <td>    0.137</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>ankle - temperature</th>     <td>   -0.0127</td> <td>    0.002</td> <td>   -6.165</td> <td> 0.000</td> <td>   -0.017</td> <td>   -0.009</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[2] The condition number is large, 7.2e+04. This might indicate that there are<br/>strong multicollinearity or other numerical problems."
      ],
      "text/latex": [
       "\\begin{center}\n",
       "\\begin{tabular}{lclc}\n",
       "\\toprule\n",
       "\\textbf{Dep. Variable:}            &      METs     & \\textbf{  R-squared:         } &     0.926   \\\\\n",
       "\\textbf{Model:}                    &      OLS      & \\textbf{  Adj. R-squared:    } &     0.926   \\\\\n",
       "\\textbf{No. Observations:}         &     100000    & \\textbf{  F-statistic:       } & 1.784e+05   \\\\\n",
       "\\textbf{Covariance Type:}          &   nonrobust   & \\textbf{  Prob (F-statistic):} &     0.00    \\\\\n",
       "\\bottomrule\n",
       "\\end{tabular}\n",
       "\\begin{tabular}{lcccccc}\n",
       "                                   & \\textbf{coef} & \\textbf{std err} & \\textbf{t} & \\textbf{P$> |$t$|$} & \\textbf{[0.025} & \\textbf{0.975]}  \\\\\n",
       "\\midrule\n",
       "\\textbf{const}                     &       0.9315  &        0.065     &    14.248  &         0.000        &        0.803    &        1.060     \\\\\n",
       "\\textbf{timestamp (seconds)}       &       0.0005  &     3.56e-06     &   138.983  &         0.000        &        0.000    &        0.001     \\\\\n",
       "\\textbf{heart rate (bpm)}          &       0.0012  &        0.000     &     8.980  &         0.000        &        0.001    &        0.001     \\\\\n",
       "\\textbf{activity\\_level\\_light}    &      -1.1525  &        0.007     &  -154.330  &         0.000        &       -1.167    &       -1.138     \\\\\n",
       "\\textbf{activity\\_level\\_vigorous} &       3.9364  &        0.007     &   585.567  &         0.000        &        3.923    &        3.950     \\\\\n",
       "\\textbf{hand - temperature}        &      -0.0825  &        0.002     &   -37.392  &         0.000        &       -0.087    &       -0.078     \\\\\n",
       "\\textbf{chest - temperature}       &       0.1320  &        0.003     &    51.415  &         0.000        &        0.127    &        0.137     \\\\\n",
       "\\textbf{ankle - temperature}       &      -0.0127  &        0.002     &    -6.165  &         0.000        &       -0.017    &       -0.009     \\\\\n",
       "\\bottomrule\n",
       "\\end{tabular}\n",
       "%\\caption{OLS Regression Results}\n",
       "\\end{center}\n",
       "\n",
       "Notes: \\newline\n",
       " [1] Standard Errors assume that the covariance matrix of the errors is correctly specified. \\newline\n",
       " [2] The condition number is large, 7.2e+04. This might indicate that there are \\newline\n",
       " strong multicollinearity or other numerical problems."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                   METs   R-squared:                       0.926\n",
       "Model:                            OLS   Adj. R-squared:                  0.926\n",
       "No. Observations:              100000   F-statistic:                 1.784e+05\n",
       "Covariance Type:            nonrobust   Prob (F-statistic):               0.00\n",
       "===========================================================================================\n",
       "                              coef    std err          t      P>|t|      [0.025      0.975]\n",
       "-------------------------------------------------------------------------------------------\n",
       "const                       0.9315      0.065     14.248      0.000       0.803       1.060\n",
       "timestamp (seconds)         0.0005   3.56e-06    138.983      0.000       0.000       0.001\n",
       "heart rate (bpm)            0.0012      0.000      8.980      0.000       0.001       0.001\n",
       "activity_level_light       -1.1525      0.007   -154.330      0.000      -1.167      -1.138\n",
       "activity_level_vigorous     3.9364      0.007    585.567      0.000       3.923       3.950\n",
       "hand - temperature         -0.0825      0.002    -37.392      0.000      -0.087      -0.078\n",
       "chest - temperature         0.1320      0.003     51.415      0.000       0.127       0.137\n",
       "ankle - temperature        -0.0127      0.002     -6.165      0.000      -0.017      -0.009\n",
       "===========================================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "[2] The condition number is large, 7.2e+04. This might indicate that there are\n",
       "strong multicollinearity or other numerical problems.\n",
       "\"\"\""
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import statsmodels.api as sm\n",
    "\n",
    "features = sfs_features[aic_features][\"features\"]\n",
    "\n",
    "X2 = X[features]\n",
    "feature = sm.add_constant(X2)\n",
    "\n",
    "model = sm.OLS(y, feature)\n",
    "results = model.fit()\n",
    "results.summary(slim=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "036dcef4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>      <td>METs</td>    <th>  R-squared:         </th> <td>   0.901</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>               <td>OLS</td>    <th>  Adj. R-squared:    </th> <td>   0.901</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>  <td>100000</td>   <th>  F-statistic:       </th> <td>4.559e+05</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>  <td>nonrobust</td> <th>  Prob (F-statistic):</th>  <td>  0.00</td>  \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "             <td></td>                <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th>                   <td>    3.9803</td> <td>    0.003</td> <td> 1252.521</td> <td> 0.000</td> <td>    3.974</td> <td>    3.987</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>activity_level_light</th>    <td>   -2.2224</td> <td>    0.005</td> <td> -486.806</td> <td> 0.000</td> <td>   -2.231</td> <td>   -2.213</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>activity_level_vigorous</th> <td>    4.0177</td> <td>    0.007</td> <td>  610.156</td> <td> 0.000</td> <td>    4.005</td> <td>    4.031</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/latex": [
       "\\begin{center}\n",
       "\\begin{tabular}{lclc}\n",
       "\\toprule\n",
       "\\textbf{Dep. Variable:}            &      METs     & \\textbf{  R-squared:         } &     0.901   \\\\\n",
       "\\textbf{Model:}                    &      OLS      & \\textbf{  Adj. R-squared:    } &     0.901   \\\\\n",
       "\\textbf{No. Observations:}         &     100000    & \\textbf{  F-statistic:       } & 4.559e+05   \\\\\n",
       "\\textbf{Covariance Type:}          &   nonrobust   & \\textbf{  Prob (F-statistic):} &     0.00    \\\\\n",
       "\\bottomrule\n",
       "\\end{tabular}\n",
       "\\begin{tabular}{lcccccc}\n",
       "                                   & \\textbf{coef} & \\textbf{std err} & \\textbf{t} & \\textbf{P$> |$t$|$} & \\textbf{[0.025} & \\textbf{0.975]}  \\\\\n",
       "\\midrule\n",
       "\\textbf{const}                     &       3.9803  &        0.003     &  1252.521  &         0.000        &        3.974    &        3.987     \\\\\n",
       "\\textbf{activity\\_level\\_light}    &      -2.2224  &        0.005     &  -486.806  &         0.000        &       -2.231    &       -2.213     \\\\\n",
       "\\textbf{activity\\_level\\_vigorous} &       4.0177  &        0.007     &   610.156  &         0.000        &        4.005    &        4.031     \\\\\n",
       "\\bottomrule\n",
       "\\end{tabular}\n",
       "%\\caption{OLS Regression Results}\n",
       "\\end{center}\n",
       "\n",
       "Notes: \\newline\n",
       " [1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                   METs   R-squared:                       0.901\n",
       "Model:                            OLS   Adj. R-squared:                  0.901\n",
       "No. Observations:              100000   F-statistic:                 4.559e+05\n",
       "Covariance Type:            nonrobust   Prob (F-statistic):               0.00\n",
       "===========================================================================================\n",
       "                              coef    std err          t      P>|t|      [0.025      0.975]\n",
       "-------------------------------------------------------------------------------------------\n",
       "const                       3.9803      0.003   1252.521      0.000       3.974       3.987\n",
       "activity_level_light       -2.2224      0.005   -486.806      0.000      -2.231      -2.213\n",
       "activity_level_vigorous     4.0177      0.007    610.156      0.000       4.005       4.031\n",
       "===========================================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Reducing the independent variable to capture only activity level\n",
    "\n",
    "X2 = X[[\"activity_level_light\", \"activity_level_vigorous\"]]\n",
    "feature = sm.add_constant(X2)\n",
    "\n",
    "model = sm.OLS(y, feature)\n",
    "results = model.fit()\n",
    "results.summary(slim=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a9ec032c",
   "metadata": {},
   "source": [
    "# Insight Sumarry from Regression Model 1\n",
    "\n",
    "With Dependent Variable (METs) for the model, try to observe how, with a regression model, the independent variables(Activity Level) can predict or explain the changes in METs value. The model suggests a strong relationship between the dependent variable (METs) and the independent variables (timestamp, heart rate, activity levels, and temperatures). The high R-squared value(92%)indicates a good fit, with a warning to note strong multicollinearity, which may indicate a high correlation between independent variables and can affect the stability and reliability of coefficient estimates. Hence, because of this warning, I reduced the feature and passed it again for prediction. The model again suggests that both activity_level_light and activity_level_vigorous have a significant impact on the METs values. The negative coefficient for activity_level_light (-2.2224) indicates that, on average, higher levels of light activity are associated with lower METs. Conversely, the positive coefficient for activity_level_vigorous (4.0177) indicates that higher vigorous activity levels are associated with higher METs. The high R-squared value indicates a good fit of the model to the data. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e7a74513",
   "metadata": {},
   "source": [
    "# Regression Model 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "dfb0a8ee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x12d676a10>]"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Linear Regression Model (Predicting heart rate with Independent variables(Activity Level, temperature etc)\n",
    "\n",
    "resp = \"heart rate (bpm)\"\n",
    "y = df_model[resp]\n",
    "X = df_model.copy(deep=True)\n",
    "X.drop(columns=[resp],inplace=True)\n",
    "\n",
    "AIC = np.zeros(len(X.columns))\n",
    "lm = LinearRegression()\n",
    "num_features = np.arange(1,len(df_model.columns))\n",
    "sfs_features = {nf : {} for nf in num_features[:-1]}\n",
    "\n",
    "for idx,nf in enumerate(num_features[:-1]):\n",
    "    sfs = SequentialFeatureSelector(lm,n_features_to_select=nf).fit(X,y)\n",
    "    features = sfs.get_feature_names_out()\n",
    "    new_X = X[features]\n",
    "    nf_lm = lm.fit(new_X,y)\n",
    "    score = nf_lm.score(new_X,y)\n",
    "    y_pred = nf_lm.predict(new_X)\n",
    "    mse = mean_squared_error(y,y_pred)\n",
    "    AIC[idx] = 2.0*nf + len(X) * np.log(2.0*np.pi*(mse ** 2.0)) + len(X)\n",
    "    sfs_features[nf] = {\"score\":score, \"features\": features, \"model\":nf_lm}\n",
    "    \n",
    "nf_lm = lm.fit(X,y)\n",
    "score = nf_lm.score(X,y)\n",
    "y_pred = nf_lm.predict(X)\n",
    "mse = mean_squared_error(y,y_pred)\n",
    "AIC[-1] = 2.0*num_features[-1] + len(X) * np.log(2.0*np.pi*(mse ** 2.0)) + len(X)\n",
    "\n",
    "aic_features = np.argmin(AIC) + 1\n",
    "fig, ax = plt.subplots(nrows=1,ncols=1)\n",
    "ax.set_xlabel(\"Number of features\")\n",
    "ax.set_ylabel(\"AIC\")\n",
    "ax.set_title(f\"Determine number of features: AIC, {aic_features} features\")\n",
    "ax.plot(num_features,AIC,ls=\"--\",lw=2,marker=\"x\",c=\"k\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "c4acaeee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>    <td>heart rate (bpm)</td> <th>  R-squared:         </th> <td>   0.729</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.729</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>100000</td>      <th>  F-statistic:       </th> <td>3.850e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>  Prob (F-statistic):</th>  <td>  0.00</td>  \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "             <td></td>                <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th>                   <td>  114.4841</td> <td>    1.575</td> <td>   72.692</td> <td> 0.000</td> <td>  111.397</td> <td>  117.571</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>timestamp (seconds)</th>     <td>    0.0108</td> <td> 8.73e-05</td> <td>  123.785</td> <td> 0.000</td> <td>    0.011</td> <td>    0.011</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>METs</th>                    <td>    0.6843</td> <td>    0.076</td> <td>    8.980</td> <td> 0.000</td> <td>    0.535</td> <td>    0.834</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>activity_level_light</th>    <td>  -35.7216</td> <td>    0.441</td> <td>  -81.062</td> <td> 0.000</td> <td>  -36.585</td> <td>  -34.858</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>activity_level_moderate</th> <td>  -19.0743</td> <td>    0.336</td> <td>  -56.826</td> <td> 0.000</td> <td>  -19.732</td> <td>  -18.416</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>hand - temperature</th>      <td>    1.2010</td> <td>    0.053</td> <td>   22.482</td> <td> 0.000</td> <td>    1.096</td> <td>    1.306</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>chest - temperature</th>     <td>   -3.2712</td> <td>    0.062</td> <td>  -52.894</td> <td> 0.000</td> <td>   -3.392</td> <td>   -3.150</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>ankle - temperature</th>     <td>    2.2095</td> <td>    0.049</td> <td>   44.943</td> <td> 0.000</td> <td>    2.113</td> <td>    2.306</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[2] The condition number is large, 7.22e+04. This might indicate that there are<br/>strong multicollinearity or other numerical problems."
      ],
      "text/latex": [
       "\\begin{center}\n",
       "\\begin{tabular}{lclc}\n",
       "\\toprule\n",
       "\\textbf{Dep. Variable:}            & heart rate (bpm) & \\textbf{  R-squared:         } &     0.729   \\\\\n",
       "\\textbf{Model:}                    &       OLS        & \\textbf{  Adj. R-squared:    } &     0.729   \\\\\n",
       "\\textbf{No. Observations:}         &      100000      & \\textbf{  F-statistic:       } & 3.850e+04   \\\\\n",
       "\\textbf{Covariance Type:}          &    nonrobust     & \\textbf{  Prob (F-statistic):} &     0.00    \\\\\n",
       "\\bottomrule\n",
       "\\end{tabular}\n",
       "\\begin{tabular}{lcccccc}\n",
       "                                   & \\textbf{coef} & \\textbf{std err} & \\textbf{t} & \\textbf{P$> |$t$|$} & \\textbf{[0.025} & \\textbf{0.975]}  \\\\\n",
       "\\midrule\n",
       "\\textbf{const}                     &     114.4841  &        1.575     &    72.692  &         0.000        &      111.397    &      117.571     \\\\\n",
       "\\textbf{timestamp (seconds)}       &       0.0108  &     8.73e-05     &   123.785  &         0.000        &        0.011    &        0.011     \\\\\n",
       "\\textbf{METs}                      &       0.6843  &        0.076     &     8.980  &         0.000        &        0.535    &        0.834     \\\\\n",
       "\\textbf{activity\\_level\\_light}    &     -35.7216  &        0.441     &   -81.062  &         0.000        &      -36.585    &      -34.858     \\\\\n",
       "\\textbf{activity\\_level\\_moderate} &     -19.0743  &        0.336     &   -56.826  &         0.000        &      -19.732    &      -18.416     \\\\\n",
       "\\textbf{hand - temperature}        &       1.2010  &        0.053     &    22.482  &         0.000        &        1.096    &        1.306     \\\\\n",
       "\\textbf{chest - temperature}       &      -3.2712  &        0.062     &   -52.894  &         0.000        &       -3.392    &       -3.150     \\\\\n",
       "\\textbf{ankle - temperature}       &       2.2095  &        0.049     &    44.943  &         0.000        &        2.113    &        2.306     \\\\\n",
       "\\bottomrule\n",
       "\\end{tabular}\n",
       "%\\caption{OLS Regression Results}\n",
       "\\end{center}\n",
       "\n",
       "Notes: \\newline\n",
       " [1] Standard Errors assume that the covariance matrix of the errors is correctly specified. \\newline\n",
       " [2] The condition number is large, 7.22e+04. This might indicate that there are \\newline\n",
       " strong multicollinearity or other numerical problems."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:       heart rate (bpm)   R-squared:                       0.729\n",
       "Model:                            OLS   Adj. R-squared:                  0.729\n",
       "No. Observations:              100000   F-statistic:                 3.850e+04\n",
       "Covariance Type:            nonrobust   Prob (F-statistic):               0.00\n",
       "===========================================================================================\n",
       "                              coef    std err          t      P>|t|      [0.025      0.975]\n",
       "-------------------------------------------------------------------------------------------\n",
       "const                     114.4841      1.575     72.692      0.000     111.397     117.571\n",
       "timestamp (seconds)         0.0108   8.73e-05    123.785      0.000       0.011       0.011\n",
       "METs                        0.6843      0.076      8.980      0.000       0.535       0.834\n",
       "activity_level_light      -35.7216      0.441    -81.062      0.000     -36.585     -34.858\n",
       "activity_level_moderate   -19.0743      0.336    -56.826      0.000     -19.732     -18.416\n",
       "hand - temperature          1.2010      0.053     22.482      0.000       1.096       1.306\n",
       "chest - temperature        -3.2712      0.062    -52.894      0.000      -3.392      -3.150\n",
       "ankle - temperature         2.2095      0.049     44.943      0.000       2.113       2.306\n",
       "===========================================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "[2] The condition number is large, 7.22e+04. This might indicate that there are\n",
       "strong multicollinearity or other numerical problems.\n",
       "\"\"\""
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import statsmodels.api as sm\n",
    "\n",
    "features = sfs_features[aic_features][\"features\"]\n",
    "\n",
    "X2 = X[features]\n",
    "feature = sm.add_constant(X2)\n",
    "\n",
    "model = sm.OLS(y, feature)\n",
    "results = model.fit()\n",
    "results.summary(slim=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "id": "2910d559",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>    <td>heart rate (bpm)</td> <th>  R-squared:         </th> <td>   0.650</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.650</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>100000</td>      <th>  F-statistic:       </th> <td>9.299e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>  Prob (F-statistic):</th>  <td>  0.00</td>  \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "             <td></td>                <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th>                   <td>  145.1119</td> <td>    0.137</td> <td> 1060.340</td> <td> 0.000</td> <td>  144.844</td> <td>  145.380</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>activity_level_light</th>    <td>  -61.1806</td> <td>    0.157</td> <td> -388.665</td> <td> 0.000</td> <td>  -61.489</td> <td>  -60.872</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>activity_level_moderate</th> <td>  -27.3154</td> <td>    0.156</td> <td> -174.812</td> <td> 0.000</td> <td>  -27.622</td> <td>  -27.009</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/latex": [
       "\\begin{center}\n",
       "\\begin{tabular}{lclc}\n",
       "\\toprule\n",
       "\\textbf{Dep. Variable:}            & heart rate (bpm) & \\textbf{  R-squared:         } &     0.650   \\\\\n",
       "\\textbf{Model:}                    &       OLS        & \\textbf{  Adj. R-squared:    } &     0.650   \\\\\n",
       "\\textbf{No. Observations:}         &      100000      & \\textbf{  F-statistic:       } & 9.299e+04   \\\\\n",
       "\\textbf{Covariance Type:}          &    nonrobust     & \\textbf{  Prob (F-statistic):} &     0.00    \\\\\n",
       "\\bottomrule\n",
       "\\end{tabular}\n",
       "\\begin{tabular}{lcccccc}\n",
       "                                   & \\textbf{coef} & \\textbf{std err} & \\textbf{t} & \\textbf{P$> |$t$|$} & \\textbf{[0.025} & \\textbf{0.975]}  \\\\\n",
       "\\midrule\n",
       "\\textbf{const}                     &     145.1119  &        0.137     &  1060.340  &         0.000        &      144.844    &      145.380     \\\\\n",
       "\\textbf{activity\\_level\\_light}    &     -61.1806  &        0.157     &  -388.665  &         0.000        &      -61.489    &      -60.872     \\\\\n",
       "\\textbf{activity\\_level\\_moderate} &     -27.3154  &        0.156     &  -174.812  &         0.000        &      -27.622    &      -27.009     \\\\\n",
       "\\bottomrule\n",
       "\\end{tabular}\n",
       "%\\caption{OLS Regression Results}\n",
       "\\end{center}\n",
       "\n",
       "Notes: \\newline\n",
       " [1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:       heart rate (bpm)   R-squared:                       0.650\n",
       "Model:                            OLS   Adj. R-squared:                  0.650\n",
       "No. Observations:              100000   F-statistic:                 9.299e+04\n",
       "Covariance Type:            nonrobust   Prob (F-statistic):               0.00\n",
       "===========================================================================================\n",
       "                              coef    std err          t      P>|t|      [0.025      0.975]\n",
       "-------------------------------------------------------------------------------------------\n",
       "const                     145.1119      0.137   1060.340      0.000     144.844     145.380\n",
       "activity_level_light      -61.1806      0.157   -388.665      0.000     -61.489     -60.872\n",
       "activity_level_moderate   -27.3154      0.156   -174.812      0.000     -27.622     -27.009\n",
       "===========================================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X2 = X[[\"activity_level_light\", \"activity_level_moderate\"]]\n",
    "feature = sm.add_constant(X2)\n",
    "\n",
    "model = sm.OLS(y, feature)\n",
    "results = model.fit()\n",
    "results.summary(slim=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "65f51db5",
   "metadata": {},
   "source": [
    "# Insight Summary from Linear Regression 2\n",
    "\n",
    "With a dependent variable (heart rate) for the model, try to observe how, with a regression model, the independent variables(Activity level) can predict or explain the changes in MET's value. The model suggests a strong relationship between the dependent variable (heart rate) and the independent variables (timestamp, heart rate, activity levels, and temperatures). The R-squared value is 0.729, indicating that approximately 72.9% of the variability in the dependent variable is explained by the independent variables included in the model. which makes the model a good fit and agrees with the hypothesis that the level of activity carried out could be determined from the physiological metric and visa versa.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9146791e",
   "metadata": {},
   "source": [
    "# Overview Insight of Linear Regression Model\n",
    "\n",
    "The positive coefficients for the two tested dependent variables (heart rate and METs) against various dependent variables (Activity ID level and chest temperature) suggest there may be a positive relationship between these features and MET, while the negative coefficients for hand and ankle temperatures may have a negative relationship with MET. Physiologically, this would make sense, as during exercise, the heart beats faster to pump more oxygen around the body, but oxygen will usually go mainly towards the muscles and increase the breathing of an individual rather than the body's extremities, such as the hand and ankle.\n",
    "Also, doing any exercise impacts the MET reading as this variable measures the energy expended during physical activities.\n",
    "\n",
    "1) The positive coefficient for the independent variable could imply a positive relation with the METs, which is the response variable; every increase in the listed variable generates an increase in METs value.\n",
    "\n",
    "2) Also, the p-value supported that activity level has a significant prediction of the value of the physiological metric(Heart rate and the METs), which supported the insight in the visual in EDA charts 2.1 and 2.2 \n",
    "\n",
    "The visual and model insight and the model's insight are in line with what really used to happen in reality when a physical exercise of different intensity is carried out. For instance, when we exercise, our heart beats faster, pumping more oxygen. However, oxygen usually reaches our muscles rather than our extremities, such as our hands and ankles, and the intensity of the physical activities will impact the METs reading from Low, Moderate to high METs as it measures the amount of energy used for physical activity.\n",
    "\n",
    "\n",
    "for the model's performance, we could evaluate the using value for R-squared(R^2) shows:\n",
    "-  R-squared (R^2): This is the proportion of the variance in the dependent variable that is predictable from the independent variables. In the case of the model above, it is with 70% to 90%, indicating that the model explains 70% to 90% of the variability in the dependent variable. Which makes the model a decent fit (as indicated by the R^2 value), \n",
    "\n",
    "The coefficients provide insights into the relationships between the predictor and dependent variables. The p-values help assess the statistical significance of each predictor variable, of which the activity level significantly predicts both dependent variables (MET and heart rate value)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6954f11e",
   "metadata": {},
   "source": [
    "# K-mean clustering Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "id": "d5187912",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/user/anaconda3/lib/python3.11/site-packages/sklearn/cluster/_kmeans.py:1412: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  super()._check_params_vs_input(X, default_n_init=10)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0.98, 'Cluster Analysis using K-Means')"
      ]
     },
     "execution_count": 139,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1280x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.cluster import KMeans\n",
    "\n",
    "cluster_df = df_model.copy(deep=True)\n",
    "\n",
    "n_clusters = 2\n",
    "name = f\"clusters_{n_clusters}\"\n",
    "kmeans = KMeans(n_clusters=n_clusters).fit(df_model)\n",
    "cluster_df[name] = kmeans.predict(df_model)\n",
    "\n",
    "fig, axes = plt.subplots(nrows=1,ncols=2,sharex=True, sharey=True)\n",
    "\n",
    "sns.scatterplot(df_model,x=\"METs\",y=\"heart rate (bpm)\",hue=df_model.activity_level_vigorous,ax=axes[0])\n",
    "sns.scatterplot(df_model,x=\"METs\",y=\"heart rate (bpm)\",hue=cluster_df[name],ax=axes[1])\n",
    "\n",
    "fig.set_figwidth(fig.get_figwidth() * 2.0)\n",
    "fig.suptitle(\"Cluster Analysis using K-Means\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "05af2e4b",
   "metadata": {},
   "source": [
    "# Recommendation:\n",
    "\n",
    "- The regression model results show a significant correlation between the independent variables (timestamp, heart rate, activity levels, and temperature) and the dependent variable (METs and heart rate). This suggests that the variables can be used to predict and assess the intensity of an individual's physical and provide information about an individual's wellness through the values recorded from the dependent and independent variables. \n",
    "\n",
    "In the future, some physiological metrics should be included, and the target market should be focused on individuals who will be interested in sensor tracking devices; these are individuals who are interested in active physical exercise as most people are involved in light to moderate physical activities might not be so much interested in the accuracy or type of metric fitness tracking device recorded, hence, many participants in vigorous activity category should be engaged to gain more information on what key features they desire in a device; doing this extensive research could put Trivisio company new tracking device over its competitor market.\n",
    "\n",
    "Below are a few recommendations obtained from the dataset that could guide and improve Trivisio’s New device market:\n",
    "\n",
    "1) Metric Accuracy: Ensuring the tracking device records and measures the physiological metrics accurately for individuals to gauge an individual's physical activity intensity level.\n",
    "\n",
    "2) Upgrading sensor technology to incorporate additional physiological metrics, like glucose levels and sleeping hours, could increase accuracy in measuring overall fitness, and clients are interested in the effects of exercise. Additionally, it gives users the capacity to precisely, non-invasively, and instantly read and respond to a crucial biological stress signal, such as sweat cortisol levels.\n",
    "\n",
    "3) Activity Tracking Software: The model can be incorporated into activity tracking software that automatically recognizes and logs physical activities based on real-time physiological and sensor data.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b0eef87",
   "metadata": {},
   "source": [
    "Referrence\n",
    "\n",
    "- https://pubmed.ncbi.nlm.nih.gov/24268570/\n",
    "- https://canvas.sussex.ac.uk/courses/26311/pages/report-physical-activity-monitoring\n",
    "- ChatGPT\n",
    "- Module material and Lab exercise\n",
    "- https://www.medicaldesignbriefs.com/component/content/article/45403-smartwatch-measures-key-stress-hormone#:~:text=A%20research%20team%20has%20developed,noninvasively%2C%20and%20in%20real%20time."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "id": "0e9b2ebb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Word count in markdown cells: 3002\n"
     ]
    }
   ],
   "source": [
    "import io\n",
    "import nbformat\n",
    "\n",
    "filepath = \"Sub_Report 2_Final-Fauzy.ipynb\"\n",
    "\n",
    "with io.open(filepath, 'r', encoding='utf-8') as f:\n",
    "    nb = nbformat.read(f, as_version=4)\n",
    "\n",
    "word_count = 0\n",
    "if \"cells\" in nb:\n",
    "    for cell in nb[\"cells\"]:\n",
    "        if \"source\" in cell and cell[\"cell_type\"] == \"markdown\":\n",
    "            word_count += len(cell[\"source\"].replace('#', '').lstrip().split(' '))\n",
    "\n",
    "print(\"Word count in markdown cells:\", word_count)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e0a03d97",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
